
Otoge-Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001c14  00001ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800110  00800110  00001cb8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ce8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000634c  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c12  00000000  00000000  000082ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000890c  00000000  00000000  00009efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a30  00000000  00000000  0001280c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00017632  00000000  00000000  0001323c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048a4  00000000  00000000  0002a86e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bf0  00000000  00000000  0002f112  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000767e  00000000  00000000  0002fd02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c1 c0       	rjmp	.+386    	; 0x184 <__ctors_end>
       2:	00 00       	nop
       4:	db c0       	rjmp	.+438    	; 0x1bc <__bad_interrupt>
       6:	00 00       	nop
       8:	d9 c0       	rjmp	.+434    	; 0x1bc <__bad_interrupt>
       a:	00 00       	nop
       c:	d7 c0       	rjmp	.+430    	; 0x1bc <__bad_interrupt>
       e:	00 00       	nop
      10:	d5 c0       	rjmp	.+426    	; 0x1bc <__bad_interrupt>
      12:	00 00       	nop
      14:	d3 c0       	rjmp	.+422    	; 0x1bc <__bad_interrupt>
      16:	00 00       	nop
      18:	d1 c0       	rjmp	.+418    	; 0x1bc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cf c0       	rjmp	.+414    	; 0x1bc <__bad_interrupt>
      1e:	00 00       	nop
      20:	cd c0       	rjmp	.+410    	; 0x1bc <__bad_interrupt>
      22:	00 00       	nop
      24:	cb c0       	rjmp	.+406    	; 0x1bc <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_10>
      2c:	c7 c0       	rjmp	.+398    	; 0x1bc <__bad_interrupt>
      2e:	00 00       	nop
      30:	c5 c0       	rjmp	.+394    	; 0x1bc <__bad_interrupt>
      32:	00 00       	nop
      34:	c3 c0       	rjmp	.+390    	; 0x1bc <__bad_interrupt>
      36:	00 00       	nop
      38:	c1 c0       	rjmp	.+386    	; 0x1bc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bf c0       	rjmp	.+382    	; 0x1bc <__bad_interrupt>
      3e:	00 00       	nop
      40:	bd c0       	rjmp	.+378    	; 0x1bc <__bad_interrupt>
      42:	00 00       	nop
      44:	bb c0       	rjmp	.+374    	; 0x1bc <__bad_interrupt>
      46:	00 00       	nop
      48:	b9 c0       	rjmp	.+370    	; 0x1bc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b7 c0       	rjmp	.+366    	; 0x1bc <__bad_interrupt>
      4e:	00 00       	nop
      50:	b5 c0       	rjmp	.+362    	; 0x1bc <__bad_interrupt>
      52:	00 00       	nop
      54:	b3 c0       	rjmp	.+358    	; 0x1bc <__bad_interrupt>
      56:	00 00       	nop
      58:	b1 c0       	rjmp	.+354    	; 0x1bc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	af c0       	rjmp	.+350    	; 0x1bc <__bad_interrupt>
      5e:	00 00       	nop
      60:	ad c0       	rjmp	.+346    	; 0x1bc <__bad_interrupt>
      62:	00 00       	nop
      64:	ab c0       	rjmp	.+342    	; 0x1bc <__bad_interrupt>
      66:	00 00       	nop
      68:	a9 c0       	rjmp	.+338    	; 0x1bc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a7 c0       	rjmp	.+334    	; 0x1bc <__bad_interrupt>
      6e:	00 00       	nop
      70:	a5 c0       	rjmp	.+330    	; 0x1bc <__bad_interrupt>
      72:	00 00       	nop
      74:	a3 c0       	rjmp	.+326    	; 0x1bc <__bad_interrupt>
      76:	00 00       	nop
      78:	a1 c0       	rjmp	.+322    	; 0x1bc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9f c0       	rjmp	.+318    	; 0x1bc <__bad_interrupt>
      7e:	00 00       	nop
      80:	9d c0       	rjmp	.+314    	; 0x1bc <__bad_interrupt>
      82:	00 00       	nop
      84:	9b c0       	rjmp	.+310    	; 0x1bc <__bad_interrupt>
      86:	00 00       	nop
      88:	99 c0       	rjmp	.+306    	; 0x1bc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	97 c0       	rjmp	.+302    	; 0x1bc <__bad_interrupt>
      8e:	00 00       	nop
      90:	95 c0       	rjmp	.+298    	; 0x1bc <__bad_interrupt>
      92:	00 00       	nop
      94:	93 c0       	rjmp	.+294    	; 0x1bc <__bad_interrupt>
      96:	00 00       	nop
      98:	91 c0       	rjmp	.+290    	; 0x1bc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8f c0       	rjmp	.+286    	; 0x1bc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	8d c0       	rjmp	.+282    	; 0x1bc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	8b c0       	rjmp	.+278    	; 0x1bc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	89 c0       	rjmp	.+274    	; 0x1bc <__bad_interrupt>
	...

000000ac <ProductString>:
      ac:	1a 03 4f 00 74 00 6f 00 67 00 65 00 20 00 53 00     ..O.t.o.g.e. .S.
      bc:	6c 00 69 00 64 00 65 00 72 00 00 00                 l.i.d.e.r...

000000c8 <ManufacturerString>:
      c8:	48 03 4e 00 69 00 73 00 68 00 69 00 6e 00 61 00     H.N.i.s.h.i.n.a.
      d8:	20 00 4b 00 65 00 6e 00 74 00 61 00 28 00 62 00      .K.e.n.t.a.(.b.
      e8:	61 00 73 00 65 00 64 00 20 00 62 00 79 00 20 00     a.s.e.d. .b.y. .
      f8:	44 00 65 00 61 00 6e 00 20 00 43 00 61 00 6d 00     D.e.a.n. .C.a.m.
     108:	65 00 72 00 61 00 29 00 00 00                       e.r.a.)...

00000112 <LanguageString>:
     112:	04 03 09 04                                         ....

00000116 <ConfigurationDescriptor>:
     116:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     126:	00 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......
     136:	00 05                                               ..

00000138 <DeviceDescriptor>:
     138:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....
     148:	00 01                                               ..

0000014a <JoystickReport>:
     14a:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 09 32     ...........0.1.2
     15a:	16 ec ff 26 14 00 36 ff ff 46 01 00 95 03 75 08     ...&..6..F....u.
     16a:	81 02 c0 05 09 19 01 29 10 15 00 25 01 75 01 95     .......)...%.u..
     17a:	10 81 02 75 00 95 01 81 01 c0                       ...u......

00000184 <__ctors_end>:
     184:	11 24       	eor	r1, r1
     186:	1f be       	out	0x3f, r1	; 63
     188:	cf ef       	ldi	r28, 0xFF	; 255
     18a:	da e0       	ldi	r29, 0x0A	; 10
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	cd bf       	out	0x3d, r28	; 61

00000190 <__do_copy_data>:
     190:	11 e0       	ldi	r17, 0x01	; 1
     192:	a0 e0       	ldi	r26, 0x00	; 0
     194:	b1 e0       	ldi	r27, 0x01	; 1
     196:	e4 e1       	ldi	r30, 0x14	; 20
     198:	fc e1       	ldi	r31, 0x1C	; 28
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x10>
     19c:	05 90       	lpm	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	a0 31       	cpi	r26, 0x10	; 16
     1a2:	b1 07       	cpc	r27, r17
     1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0xc>

000001a6 <__do_clear_bss>:
     1a6:	21 e0       	ldi	r18, 0x01	; 1
     1a8:	a0 e1       	ldi	r26, 0x10	; 16
     1aa:	b1 e0       	ldi	r27, 0x01	; 1
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
     1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
     1b0:	a6 34       	cpi	r26, 0x46	; 70
     1b2:	b2 07       	cpc	r27, r18
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
     1b6:	6c d0       	rcall	.+216    	; 0x290 <main>
     1b8:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <_exit>

000001bc <__bad_interrupt>:
     1bc:	21 cf       	rjmp	.-446    	; 0x0 <__vectors>

000001be <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     1be:	29 2f       	mov	r18, r25
     1c0:	33 27       	eor	r19, r19
     1c2:	23 30       	cpi	r18, 0x03	; 3
     1c4:	31 05       	cpc	r19, r1
     1c6:	c9 f0       	breq	.+50     	; 0x1fa <CALLBACK_USB_GetDescriptor+0x3c>
     1c8:	38 f4       	brcc	.+14     	; 0x1d8 <CALLBACK_USB_GetDescriptor+0x1a>
     1ca:	21 30       	cpi	r18, 0x01	; 1
     1cc:	31 05       	cpc	r19, r1
     1ce:	59 f0       	breq	.+22     	; 0x1e6 <CALLBACK_USB_GetDescriptor+0x28>
     1d0:	22 30       	cpi	r18, 0x02	; 2
     1d2:	31 05       	cpc	r19, r1
     1d4:	69 f0       	breq	.+26     	; 0x1f0 <CALLBACK_USB_GetDescriptor+0x32>
     1d6:	35 c0       	rjmp	.+106    	; 0x242 <CALLBACK_USB_GetDescriptor+0x84>
     1d8:	21 32       	cpi	r18, 0x21	; 33
     1da:	31 05       	cpc	r19, r1
     1dc:	41 f1       	breq	.+80     	; 0x22e <CALLBACK_USB_GetDescriptor+0x70>
     1de:	22 32       	cpi	r18, 0x22	; 34
     1e0:	31 05       	cpc	r19, r1
     1e2:	51 f1       	breq	.+84     	; 0x238 <CALLBACK_USB_GetDescriptor+0x7a>
     1e4:	2e c0       	rjmp	.+92     	; 0x242 <CALLBACK_USB_GetDescriptor+0x84>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     1e6:	82 e1       	ldi	r24, 0x12	; 18
     1e8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1ea:	28 e3       	ldi	r18, 0x38	; 56
     1ec:	31 e0       	ldi	r19, 0x01	; 1
     1ee:	32 c0       	rjmp	.+100    	; 0x254 <CALLBACK_USB_GetDescriptor+0x96>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1f0:	82 e2       	ldi	r24, 0x22	; 34
     1f2:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1f4:	26 e1       	ldi	r18, 0x16	; 22
     1f6:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1f8:	2d c0       	rjmp	.+90     	; 0x254 <CALLBACK_USB_GetDescriptor+0x96>
		case DTYPE_String:
			switch (DescriptorNumber)
     1fa:	99 27       	eor	r25, r25
     1fc:	81 30       	cpi	r24, 0x01	; 1
     1fe:	91 05       	cpc	r25, r1
     200:	51 f0       	breq	.+20     	; 0x216 <CALLBACK_USB_GetDescriptor+0x58>
     202:	18 f0       	brcs	.+6      	; 0x20a <CALLBACK_USB_GetDescriptor+0x4c>
     204:	02 97       	sbiw	r24, 0x02	; 2
     206:	69 f0       	breq	.+26     	; 0x222 <CALLBACK_USB_GetDescriptor+0x64>
     208:	21 c0       	rjmp	.+66     	; 0x24c <CALLBACK_USB_GetDescriptor+0x8e>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     20a:	e2 e1       	ldi	r30, 0x12	; 18
     20c:	f1 e0       	ldi	r31, 0x01	; 1
     20e:	84 91       	lpm	r24, Z
     210:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     212:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     214:	1f c0       	rjmp	.+62     	; 0x254 <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     216:	e8 ec       	ldi	r30, 0xC8	; 200
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	84 91       	lpm	r24, Z
     21c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     21e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     220:	19 c0       	rjmp	.+50     	; 0x254 <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     222:	ec ea       	ldi	r30, 0xAC	; 172
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	84 91       	lpm	r24, Z
     228:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     22a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     22c:	13 c0       	rjmp	.+38     	; 0x254 <CALLBACK_USB_GetDescriptor+0x96>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     22e:	89 e0       	ldi	r24, 0x09	; 9
     230:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
     232:	28 e2       	ldi	r18, 0x28	; 40
     234:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     236:	0e c0       	rjmp	.+28     	; 0x254 <CALLBACK_USB_GetDescriptor+0x96>
		case HID_DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
     238:	8a e3       	ldi	r24, 0x3A	; 58
     23a:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &JoystickReport;
     23c:	2a e4       	ldi	r18, 0x4A	; 74
     23e:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
     240:	09 c0       	rjmp	.+18     	; 0x254 <CALLBACK_USB_GetDescriptor+0x96>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	04 c0       	rjmp	.+8      	; 0x254 <CALLBACK_USB_GetDescriptor+0x96>
	uint16_t    Size    = NO_DESCRIPTOR;
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
     254:	fa 01       	movw	r30, r20
     256:	31 83       	std	Z+1, r19	; 0x01
     258:	20 83       	st	Z, r18
	return Size;
}
     25a:	08 95       	ret

0000025c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     25c:	84 b7       	in	r24, 0x34	; 52
     25e:	87 7f       	andi	r24, 0xF7	; 247
     260:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	a8 95       	wdr
     268:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     26c:	88 61       	ori	r24, 0x18	; 24
     26e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     272:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     276:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	80 e8       	ldi	r24, 0x80	; 128
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     284:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     288:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
     28a:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <USB_Init>
     28e:	08 95       	ret

00000290 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     290:	e5 df       	rcall	.-54     	; 0x25c <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     292:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     294:	2a e0       	ldi	r18, 0x0A	; 10
     296:	30 e0       	ldi	r19, 0x00	; 0
	
	GlobalInterruptEnable();

	for(int i=0;i<10;i++){
		DDRC=0b11111111;PORTC=0b00000000;
     298:	4f ef       	ldi	r20, 0xFF	; 255
		Delay_MS(1);
		DDRC=0b00000000;while(!(PINC & _BV(PC7))){thresholds[0]++;}
     29a:	e7 e1       	ldi	r30, 0x17	; 23
     29c:	f1 e0       	ldi	r31, 0x01	; 1
	SetupHardware();
	
	GlobalInterruptEnable();

	for(int i=0;i<10;i++){
		DDRC=0b11111111;PORTC=0b00000000;
     29e:	47 b9       	out	0x07, r20	; 7
     2a0:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a2:	8f e9       	ldi	r24, 0x9F	; 159
     2a4:	9f e0       	ldi	r25, 0x0F	; 15
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0x16>
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x1c>
     2ac:	00 00       	nop
		Delay_MS(1);
		DDRC=0b00000000;while(!(PINC & _BV(PC7))){thresholds[0]++;}
     2ae:	17 b8       	out	0x07, r1	; 7
     2b0:	37 99       	sbic	0x06, 7	; 6
     2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <main+0x32>
     2b4:	80 81       	ld	r24, Z
     2b6:	91 81       	ldd	r25, Z+1	; 0x01
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	91 83       	std	Z+1, r25	; 0x01
     2bc:	80 83       	st	Z, r24
     2be:	37 9b       	sbis	0x06, 7	; 6
     2c0:	f9 cf       	rjmp	.-14     	; 0x2b4 <main+0x24>
		//PC6
		DDRC=0b11111111;PORTC=0b00000000;
     2c2:	47 b9       	out	0x07, r20	; 7
     2c4:	18 b8       	out	0x08, r1	; 8
     2c6:	8f e9       	ldi	r24, 0x9F	; 159
     2c8:	9f e0       	ldi	r25, 0x0F	; 15
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0x3a>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x40>
     2d0:	00 00       	nop
		Delay_MS(1);
		DDRC=0b00000000;while(!(PINC & _BV(PC6))){thresholds[1]++;}
     2d2:	17 b8       	out	0x07, r1	; 7
     2d4:	36 99       	sbic	0x06, 6	; 6
     2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <main+0x56>
     2d8:	82 81       	ldd	r24, Z+2	; 0x02
     2da:	93 81       	ldd	r25, Z+3	; 0x03
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	93 83       	std	Z+3, r25	; 0x03
     2e0:	82 83       	std	Z+2, r24	; 0x02
     2e2:	36 9b       	sbis	0x06, 6	; 6
     2e4:	f9 cf       	rjmp	.-14     	; 0x2d8 <main+0x48>
		//PB3
		DDRB=0b11111111;PORTB=0b00000000;
     2e6:	44 b9       	out	0x04, r20	; 4
     2e8:	15 b8       	out	0x05, r1	; 5
     2ea:	8f e9       	ldi	r24, 0x9F	; 159
     2ec:	9f e0       	ldi	r25, 0x0F	; 15
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x5e>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x64>
     2f4:	00 00       	nop
		Delay_MS(1);
		DDRB=0b00000000;while(!(PINB & _BV(PB3))){thresholds[2]++;}
     2f6:	14 b8       	out	0x04, r1	; 4
     2f8:	1b 99       	sbic	0x03, 3	; 3
     2fa:	07 c0       	rjmp	.+14     	; 0x30a <main+0x7a>
     2fc:	84 81       	ldd	r24, Z+4	; 0x04
     2fe:	95 81       	ldd	r25, Z+5	; 0x05
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	95 83       	std	Z+5, r25	; 0x05
     304:	84 83       	std	Z+4, r24	; 0x04
     306:	1b 9b       	sbis	0x03, 3	; 3
     308:	f9 cf       	rjmp	.-14     	; 0x2fc <main+0x6c>
		//PB2
		DDRB=0b11111111;PORTB=0b00000000;
     30a:	44 b9       	out	0x04, r20	; 4
     30c:	15 b8       	out	0x05, r1	; 5
     30e:	8f e9       	ldi	r24, 0x9F	; 159
     310:	9f e0       	ldi	r25, 0x0F	; 15
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <main+0x82>
     316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x88>
     318:	00 00       	nop
		Delay_MS(1);
		DDRB=0b00000000;while(!(PINB & _BV(PB2))){thresholds[3]++;}
     31a:	14 b8       	out	0x04, r1	; 4
     31c:	1a 99       	sbic	0x03, 2	; 3
     31e:	07 c0       	rjmp	.+14     	; 0x32e <main+0x9e>
     320:	86 81       	ldd	r24, Z+6	; 0x06
     322:	97 81       	ldd	r25, Z+7	; 0x07
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	97 83       	std	Z+7, r25	; 0x07
     328:	86 83       	std	Z+6, r24	; 0x06
     32a:	1a 9b       	sbis	0x03, 2	; 3
     32c:	f9 cf       	rjmp	.-14     	; 0x320 <main+0x90>
		//PB1
		DDRB=0b11111111;PORTB=0b00000000;
     32e:	44 b9       	out	0x04, r20	; 4
     330:	15 b8       	out	0x05, r1	; 5
     332:	8f e9       	ldi	r24, 0x9F	; 159
     334:	9f e0       	ldi	r25, 0x0F	; 15
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	f1 f7       	brne	.-4      	; 0x336 <main+0xa6>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0xac>
     33c:	00 00       	nop
		Delay_MS(1);
		DDRB=0b00000000;while(!(PINB & _BV(PB1))){thresholds[4]++;}
     33e:	14 b8       	out	0x04, r1	; 4
     340:	19 99       	sbic	0x03, 1	; 3
     342:	07 c0       	rjmp	.+14     	; 0x352 <main+0xc2>
     344:	80 85       	ldd	r24, Z+8	; 0x08
     346:	91 85       	ldd	r25, Z+9	; 0x09
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	91 87       	std	Z+9, r25	; 0x09
     34c:	80 87       	std	Z+8, r24	; 0x08
     34e:	19 9b       	sbis	0x03, 1	; 3
     350:	f9 cf       	rjmp	.-14     	; 0x344 <main+0xb4>
		//PB0
		DDRB=0b11111111;PORTB=0b00000000;
     352:	44 b9       	out	0x04, r20	; 4
     354:	15 b8       	out	0x05, r1	; 5
     356:	8f e9       	ldi	r24, 0x9F	; 159
     358:	9f e0       	ldi	r25, 0x0F	; 15
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <main+0xca>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <main+0xd0>
     360:	00 00       	nop
		Delay_MS(1);
		DDRB=0b00000000;while(!(PINB & _BV(PB0))){thresholds[5]++;}
     362:	14 b8       	out	0x04, r1	; 4
     364:	18 99       	sbic	0x03, 0	; 3
     366:	07 c0       	rjmp	.+14     	; 0x376 <main+0xe6>
     368:	82 85       	ldd	r24, Z+10	; 0x0a
     36a:	93 85       	ldd	r25, Z+11	; 0x0b
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	93 87       	std	Z+11, r25	; 0x0b
     370:	82 87       	std	Z+10, r24	; 0x0a
     372:	18 9b       	sbis	0x03, 0	; 3
     374:	f9 cf       	rjmp	.-14     	; 0x368 <main+0xd8>
		//PF1
		DDRF=0b11111111;PORTF=0b00000000;
     376:	40 bb       	out	0x10, r20	; 16
     378:	11 ba       	out	0x11, r1	; 17
     37a:	8f e9       	ldi	r24, 0x9F	; 159
     37c:	9f e0       	ldi	r25, 0x0F	; 15
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <main+0xee>
     382:	00 c0       	rjmp	.+0      	; 0x384 <main+0xf4>
     384:	00 00       	nop
		Delay_MS(1);
		DDRF=0b00000000;while(!(PINF & _BV(PF1))){thresholds[6]++;}
     386:	10 ba       	out	0x10, r1	; 16
     388:	79 99       	sbic	0x0f, 1	; 15
     38a:	07 c0       	rjmp	.+14     	; 0x39a <main+0x10a>
     38c:	84 85       	ldd	r24, Z+12	; 0x0c
     38e:	95 85       	ldd	r25, Z+13	; 0x0d
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	95 87       	std	Z+13, r25	; 0x0d
     394:	84 87       	std	Z+12, r24	; 0x0c
     396:	79 9b       	sbis	0x0f, 1	; 15
     398:	f9 cf       	rjmp	.-14     	; 0x38c <main+0xfc>
		//PF0
		DDRF=0b11111111;PORTF=0b00000000;
     39a:	40 bb       	out	0x10, r20	; 16
     39c:	11 ba       	out	0x11, r1	; 17
     39e:	8f e9       	ldi	r24, 0x9F	; 159
     3a0:	9f e0       	ldi	r25, 0x0F	; 15
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <main+0x112>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x118>
     3a8:	00 00       	nop
		Delay_MS(1);
		DDRF=0b00000000;while(!(PINF & _BV(PF0))){thresholds[7]++;}
     3aa:	10 ba       	out	0x10, r1	; 16
     3ac:	78 99       	sbic	0x0f, 0	; 15
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <main+0x12e>
     3b0:	86 85       	ldd	r24, Z+14	; 0x0e
     3b2:	97 85       	ldd	r25, Z+15	; 0x0f
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	97 87       	std	Z+15, r25	; 0x0f
     3b8:	86 87       	std	Z+14, r24	; 0x0e
     3ba:	78 9b       	sbis	0x0f, 0	; 15
     3bc:	f9 cf       	rjmp	.-14     	; 0x3b0 <main+0x120>
		//PD3
		DDRD=0b11111111;PORTD=0b00000000;
     3be:	4a b9       	out	0x0a, r20	; 10
     3c0:	1b b8       	out	0x0b, r1	; 11
     3c2:	8f e9       	ldi	r24, 0x9F	; 159
     3c4:	9f e0       	ldi	r25, 0x0F	; 15
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <main+0x136>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x13c>
     3cc:	00 00       	nop
		Delay_MS(1);
		DDRD=0b00000000;while(!(PIND & _BV(PD3))){thresholds[8]++;}
     3ce:	1a b8       	out	0x0a, r1	; 10
     3d0:	4b 99       	sbic	0x09, 3	; 9
     3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <main+0x152>
     3d4:	80 89       	ldd	r24, Z+16	; 0x10
     3d6:	91 89       	ldd	r25, Z+17	; 0x11
     3d8:	01 96       	adiw	r24, 0x01	; 1
     3da:	91 8b       	std	Z+17, r25	; 0x11
     3dc:	80 8b       	std	Z+16, r24	; 0x10
     3de:	4b 9b       	sbis	0x09, 3	; 9
     3e0:	f9 cf       	rjmp	.-14     	; 0x3d4 <main+0x144>
		//PD5
		DDRD=0b11111111;PORTD=0b00000000;
     3e2:	4a b9       	out	0x0a, r20	; 10
     3e4:	1b b8       	out	0x0b, r1	; 11
     3e6:	8f e9       	ldi	r24, 0x9F	; 159
     3e8:	9f e0       	ldi	r25, 0x0F	; 15
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <main+0x15a>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x160>
     3f0:	00 00       	nop
		Delay_MS(1);
		DDRD=0b00000000;while(!(PIND & _BV(PD5))){thresholds[9]++;}
     3f2:	1a b8       	out	0x0a, r1	; 10
     3f4:	4d 99       	sbic	0x09, 5	; 9
     3f6:	07 c0       	rjmp	.+14     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3f8:	82 89       	ldd	r24, Z+18	; 0x12
     3fa:	93 89       	ldd	r25, Z+19	; 0x13
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	93 8b       	std	Z+19, r25	; 0x13
     400:	82 8b       	std	Z+18, r24	; 0x12
     402:	4d 9b       	sbis	0x09, 5	; 9
     404:	f9 cf       	rjmp	.-14     	; 0x3f8 <main+0x168>
		//PD6
		DDRD=0b11111111;PORTD=0b00000000;
     406:	4a b9       	out	0x0a, r20	; 10
     408:	1b b8       	out	0x0b, r1	; 11
     40a:	8f e9       	ldi	r24, 0x9F	; 159
     40c:	9f e0       	ldi	r25, 0x0F	; 15
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     414:	00 00       	nop
		Delay_MS(1);
		DDRD=0b00000000;while(!(PIND & _BV(PD6))){thresholds[10]++;}
     416:	1a b8       	out	0x0a, r1	; 10
     418:	4e 99       	sbic	0x09, 6	; 9
     41a:	07 c0       	rjmp	.+14     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     41c:	84 89       	ldd	r24, Z+20	; 0x14
     41e:	95 89       	ldd	r25, Z+21	; 0x15
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	95 8b       	std	Z+21, r25	; 0x15
     424:	84 8b       	std	Z+20, r24	; 0x14
     426:	4e 9b       	sbis	0x09, 6	; 9
     428:	f9 cf       	rjmp	.-14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		//PD4
		DDRD=0b11111111;PORTD=0b00000000;
     42a:	4a b9       	out	0x0a, r20	; 10
     42c:	1b b8       	out	0x0b, r1	; 11
     42e:	8f e9       	ldi	r24, 0x9F	; 159
     430:	9f e0       	ldi	r25, 0x0F	; 15
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     438:	00 00       	nop
		Delay_MS(1);
		DDRD=0b00000000;while(!(PIND & _BV(PD4))){thresholds[11]++;}
     43a:	1a b8       	out	0x0a, r1	; 10
     43c:	4c 99       	sbic	0x09, 4	; 9
     43e:	07 c0       	rjmp	.+14     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     440:	86 89       	ldd	r24, Z+22	; 0x16
     442:	97 89       	ldd	r25, Z+23	; 0x17
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	97 8b       	std	Z+23, r25	; 0x17
     448:	86 8b       	std	Z+22, r24	; 0x16
     44a:	4c 9b       	sbis	0x09, 4	; 9
     44c:	f9 cf       	rjmp	.-14     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		//PB4
		DDRB=0b11111111;PORTB=0b00000000;
     44e:	44 b9       	out	0x04, r20	; 4
     450:	15 b8       	out	0x05, r1	; 5
     452:	8f e9       	ldi	r24, 0x9F	; 159
     454:	9f e0       	ldi	r25, 0x0F	; 15
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     45c:	00 00       	nop
		Delay_MS(1);
		DDRB=0b00000000;while(!(PINB & _BV(PB4))){thresholds[12]++;}
     45e:	14 b8       	out	0x04, r1	; 4
     460:	1c 99       	sbic	0x03, 4	; 3
     462:	07 c0       	rjmp	.+14     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     464:	80 8d       	ldd	r24, Z+24	; 0x18
     466:	91 8d       	ldd	r25, Z+25	; 0x19
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	91 8f       	std	Z+25, r25	; 0x19
     46c:	80 8f       	std	Z+24, r24	; 0x18
     46e:	1c 9b       	sbis	0x03, 4	; 3
     470:	f9 cf       	rjmp	.-14     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
		//PD7
		DDRD=0b11111111;PORTD=0b00000000;
     472:	4a b9       	out	0x0a, r20	; 10
     474:	1b b8       	out	0x0b, r1	; 11
     476:	8f e9       	ldi	r24, 0x9F	; 159
     478:	9f e0       	ldi	r25, 0x0F	; 15
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     480:	00 00       	nop
		Delay_MS(1);
		DDRD=0b00000000;while(!(PIND & _BV(PD7))){thresholds[13]++;}
     482:	1a b8       	out	0x0a, r1	; 10
     484:	4f 99       	sbic	0x09, 7	; 9
     486:	07 c0       	rjmp	.+14     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     488:	82 8d       	ldd	r24, Z+26	; 0x1a
     48a:	93 8d       	ldd	r25, Z+27	; 0x1b
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	93 8f       	std	Z+27, r25	; 0x1b
     490:	82 8f       	std	Z+26, r24	; 0x1a
     492:	4f 9b       	sbis	0x09, 7	; 9
     494:	f9 cf       	rjmp	.-14     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
		//PB6
		DDRB=0b11111111;PORTB=0b00000000;
     496:	44 b9       	out	0x04, r20	; 4
     498:	15 b8       	out	0x05, r1	; 5
     49a:	8f e9       	ldi	r24, 0x9F	; 159
     49c:	9f e0       	ldi	r25, 0x0F	; 15
     49e:	01 97       	sbiw	r24, 0x01	; 1
     4a0:	f1 f7       	brne	.-4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     4a4:	00 00       	nop
		Delay_MS(1);
		DDRB=0b00000000;while(!(PINB & _BV(PB6))){thresholds[14]++;}
     4a6:	14 b8       	out	0x04, r1	; 4
     4a8:	1e 99       	sbic	0x03, 6	; 3
     4aa:	07 c0       	rjmp	.+14     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4ac:	84 8d       	ldd	r24, Z+28	; 0x1c
     4ae:	95 8d       	ldd	r25, Z+29	; 0x1d
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	95 8f       	std	Z+29, r25	; 0x1d
     4b4:	84 8f       	std	Z+28, r24	; 0x1c
     4b6:	1e 9b       	sbis	0x03, 6	; 3
     4b8:	f9 cf       	rjmp	.-14     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
		//PB5
		DDRB=0b11111111;PORTB=0b00000000;
     4ba:	44 b9       	out	0x04, r20	; 4
     4bc:	15 b8       	out	0x05, r1	; 5
     4be:	8f e9       	ldi	r24, 0x9F	; 159
     4c0:	9f e0       	ldi	r25, 0x0F	; 15
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4c8:	00 00       	nop
		Delay_MS(1);
		DDRB=0b00000000;while(!(PINB & _BV(PB5))){thresholds[15]++;}
     4ca:	14 b8       	out	0x04, r1	; 4
     4cc:	1d 99       	sbic	0x03, 5	; 3
     4ce:	07 c0       	rjmp	.+14     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     4d0:	86 8d       	ldd	r24, Z+30	; 0x1e
     4d2:	97 8d       	ldd	r25, Z+31	; 0x1f
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	97 8f       	std	Z+31, r25	; 0x1f
     4d8:	86 8f       	std	Z+30, r24	; 0x1e
     4da:	1d 9b       	sbis	0x03, 5	; 3
     4dc:	f9 cf       	rjmp	.-14     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
     4de:	21 50       	subi	r18, 0x01	; 1
     4e0:	31 09       	sbc	r19, r1
{
	SetupHardware();
	
	GlobalInterruptEnable();

	for(int i=0;i<10;i++){
     4e2:	09 f0       	breq	.+2      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4e4:	dc ce       	rjmp	.-584    	; 0x29e <main+0xe>
     4e6:	e7 e1       	ldi	r30, 0x17	; 23
     4e8:	f1 e0       	ldi	r31, 0x01	; 1
     4ea:	c7 e3       	ldi	r28, 0x37	; 55
     4ec:	d1 e0       	ldi	r29, 0x01	; 1
		Delay_MS(1);
		DDRB=0b00000000;while(!(PINB & _BV(PB5))){thresholds[15]++;}
	}
		
	for(int i=0;i<16;i++){
		thresholds[i]=thresholds[i]/10;
     4ee:	2a e0       	ldi	r18, 0x0A	; 10
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	91 81       	ldd	r25, Z+1	; 0x01
     4f6:	b9 01       	movw	r22, r18
     4f8:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__divmodhi4>
     4fc:	61 93       	st	Z+, r22
     4fe:	71 93       	st	Z+, r23
		DDRB=0b11111111;PORTB=0b00000000;
		Delay_MS(1);
		DDRB=0b00000000;while(!(PINB & _BV(PB5))){thresholds[15]++;}
	}
		
	for(int i=0;i<16;i++){
     500:	ec 17       	cp	r30, r28
     502:	fd 07       	cpc	r31, r29
     504:	b1 f7       	brne	.-20     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
		thresholds[i]=thresholds[i]/10;
	}
		
	for (;;)
	{
		HID_Device_USBTask(&Joystick_HID_Interface);
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	d0 d4       	rcall	.+2464   	; 0xeac <HID_Device_USBTask>
		USB_USBTask();
     50c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <USB_USBTask>
     510:	fa cf       	rjmp	.-12     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>

00000512 <EVENT_USB_Device_Connect>:
	USB_Init();
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     512:	08 95       	ret

00000514 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     514:	08 95       	ret

00000516 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	b4 d4       	rcall	.+2408   	; 0xe84 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     51c:	e2 ee       	ldi	r30, 0xE2	; 226
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	84 60       	ori	r24, 0x04	; 4
     524:	80 83       	st	Z, r24
     526:	08 95       	ret

00000528 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	62 c3       	rjmp	.+1732   	; 0xbf2 <HID_Device_ProcessControlRequest>
     52e:	08 95       	ret

00000530 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     530:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     534:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     538:	00 97       	sbiw	r24, 0x00	; 0
     53a:	29 f0       	breq	.+10     	; 0x546 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     542:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     546:	08 95       	ret

00000548 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	f9 01       	movw	r30, r18
	USB_JoystickReport_Data_t* JoystickReport = (USB_JoystickReport_Data_t*)ReportData;
	
	switch(num){
     54e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     552:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
     556:	87 30       	cpi	r24, 0x07	; 7
     558:	91 05       	cpc	r25, r1
     55a:	09 f4       	brne	.+2      	; 0x55e <CALLBACK_HID_Device_CreateHIDReport+0x16>
     55c:	87 c1       	rjmp	.+782    	; 0x86c <CALLBACK_HID_Device_CreateHIDReport+0x324>
     55e:	ac f4       	brge	.+42     	; 0x58a <CALLBACK_HID_Device_CreateHIDReport+0x42>
     560:	83 30       	cpi	r24, 0x03	; 3
     562:	91 05       	cpc	r25, r1
     564:	09 f4       	brne	.+2      	; 0x568 <CALLBACK_HID_Device_CreateHIDReport+0x20>
     566:	be c0       	rjmp	.+380    	; 0x6e4 <CALLBACK_HID_Device_CreateHIDReport+0x19c>
     568:	4c f4       	brge	.+18     	; 0x57c <CALLBACK_HID_Device_CreateHIDReport+0x34>
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	91 05       	cpc	r25, r1
     56e:	09 f4       	brne	.+2      	; 0x572 <CALLBACK_HID_Device_CreateHIDReport+0x2a>
     570:	57 c0       	rjmp	.+174    	; 0x620 <CALLBACK_HID_Device_CreateHIDReport+0xd8>
     572:	0c f0       	brlt	.+2      	; 0x576 <CALLBACK_HID_Device_CreateHIDReport+0x2e>
     574:	86 c0       	rjmp	.+268    	; 0x682 <CALLBACK_HID_Device_CreateHIDReport+0x13a>
     576:	89 2b       	or	r24, r25
     578:	11 f1       	breq	.+68     	; 0x5be <CALLBACK_HID_Device_CreateHIDReport+0x76>
     57a:	31 c3       	rjmp	.+1634   	; 0xbde <__stack+0xdf>
     57c:	85 30       	cpi	r24, 0x05	; 5
     57e:	91 05       	cpc	r25, r1
     580:	09 f4       	brne	.+2      	; 0x584 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
     582:	12 c1       	rjmp	.+548    	; 0x7a8 <CALLBACK_HID_Device_CreateHIDReport+0x260>
     584:	0c f4       	brge	.+2      	; 0x588 <CALLBACK_HID_Device_CreateHIDReport+0x40>
     586:	df c0       	rjmp	.+446    	; 0x746 <CALLBACK_HID_Device_CreateHIDReport+0x1fe>
     588:	40 c1       	rjmp	.+640    	; 0x80a <CALLBACK_HID_Device_CreateHIDReport+0x2c2>
     58a:	8b 30       	cpi	r24, 0x0B	; 11
     58c:	91 05       	cpc	r25, r1
     58e:	09 f4       	brne	.+2      	; 0x592 <CALLBACK_HID_Device_CreateHIDReport+0x4a>
     590:	31 c2       	rjmp	.+1122   	; 0x9f4 <CALLBACK_HID_Device_CreateHIDReport+0x4ac>
     592:	3c f4       	brge	.+14     	; 0x5a2 <CALLBACK_HID_Device_CreateHIDReport+0x5a>
     594:	89 30       	cpi	r24, 0x09	; 9
     596:	91 05       	cpc	r25, r1
     598:	09 f4       	brne	.+2      	; 0x59c <CALLBACK_HID_Device_CreateHIDReport+0x54>
     59a:	ca c1       	rjmp	.+916    	; 0x930 <CALLBACK_HID_Device_CreateHIDReport+0x3e8>
     59c:	0c f4       	brge	.+2      	; 0x5a0 <CALLBACK_HID_Device_CreateHIDReport+0x58>
     59e:	97 c1       	rjmp	.+814    	; 0x8ce <CALLBACK_HID_Device_CreateHIDReport+0x386>
     5a0:	f8 c1       	rjmp	.+1008   	; 0x992 <CALLBACK_HID_Device_CreateHIDReport+0x44a>
     5a2:	8d 30       	cpi	r24, 0x0D	; 13
     5a4:	91 05       	cpc	r25, r1
     5a6:	09 f4       	brne	.+2      	; 0x5aa <CALLBACK_HID_Device_CreateHIDReport+0x62>
     5a8:	87 c2       	rjmp	.+1294   	; 0xab8 <__DATA_REGION_LENGTH__+0xb8>
     5aa:	0c f4       	brge	.+2      	; 0x5ae <CALLBACK_HID_Device_CreateHIDReport+0x66>
     5ac:	54 c2       	rjmp	.+1192   	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
     5ae:	8e 30       	cpi	r24, 0x0E	; 14
     5b0:	91 05       	cpc	r25, r1
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <CALLBACK_HID_Device_CreateHIDReport+0x6e>
     5b4:	b2 c2       	rjmp	.+1380   	; 0xb1a <__stack+0x1b>
     5b6:	0f 97       	sbiw	r24, 0x0f	; 15
     5b8:	09 f4       	brne	.+2      	; 0x5bc <CALLBACK_HID_Device_CreateHIDReport+0x74>
     5ba:	e0 c2       	rjmp	.+1472   	; 0xb7c <__stack+0x7d>
     5bc:	10 c3       	rjmp	.+1568   	; 0xbde <__stack+0xdf>
		case 0://PC7
			DDRC=0b11111111;PORTC=0b00000000;count=0;
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	87 b9       	out	0x07, r24	; 7
     5c2:	18 b8       	out	0x08, r1	; 8
     5c4:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     5c8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     5cc:	8f e9       	ldi	r24, 0x9F	; 159
     5ce:	9f e0       	ldi	r25, 0x0F	; 15
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <CALLBACK_HID_Device_CreateHIDReport+0x88>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <CALLBACK_HID_Device_CreateHIDReport+0x8e>
     5d6:	00 00       	nop
			Delay_MS(1);
			DDRC=0b00000000;while(!(PINC & _BV(PC7))){count++;}
     5d8:	17 b8       	out	0x07, r1	; 7
     5da:	37 99       	sbic	0x06, 7	; 6
     5dc:	0b c0       	rjmp	.+22     	; 0x5f4 <CALLBACK_HID_Device_CreateHIDReport+0xac>
     5de:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     5e2:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     5ec:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     5f0:	37 9b       	sbis	0x06, 7	; 6
     5f2:	f5 cf       	rjmp	.-22     	; 0x5de <CALLBACK_HID_Device_CreateHIDReport+0x96>
			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button |= 0b00000001;}
     5f4:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     5f8:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     5fc:	aa 0f       	add	r26, r26
     5fe:	bb 1f       	adc	r27, r27
     600:	a9 5e       	subi	r26, 0xE9	; 233
     602:	be 4f       	sbci	r27, 0xFE	; 254
     604:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     608:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     60c:	2d 91       	ld	r18, X+
     60e:	3c 91       	ld	r19, X
     610:	82 1b       	sub	r24, r18
     612:	93 0b       	sbc	r25, r19
     614:	03 96       	adiw	r24, 0x03	; 3
     616:	07 97       	sbiw	r24, 0x07	; 7
     618:	18 f0       	brcs	.+6      	; 0x620 <CALLBACK_HID_Device_CreateHIDReport+0xd8>
     61a:	83 81       	ldd	r24, Z+3	; 0x03
     61c:	81 60       	ori	r24, 0x01	; 1
     61e:	83 83       	std	Z+3, r24	; 0x03
			//break;
  		case 1://PC6
  			DDRC=0b11111111;PORTC=0b00000000;count=0;
     620:	8f ef       	ldi	r24, 0xFF	; 255
     622:	87 b9       	out	0x07, r24	; 7
     624:	18 b8       	out	0x08, r1	; 8
     626:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     62a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     62e:	8f e9       	ldi	r24, 0x9F	; 159
     630:	9f e0       	ldi	r25, 0x0F	; 15
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <CALLBACK_HID_Device_CreateHIDReport+0xea>
     636:	00 c0       	rjmp	.+0      	; 0x638 <CALLBACK_HID_Device_CreateHIDReport+0xf0>
     638:	00 00       	nop
  			Delay_MS(1);
  			DDRC=0b00000000;while(!(PINC & _BV(PC6))){count++;}
     63a:	17 b8       	out	0x07, r1	; 7
     63c:	36 99       	sbic	0x06, 6	; 6
     63e:	0b c0       	rjmp	.+22     	; 0x656 <CALLBACK_HID_Device_CreateHIDReport+0x10e>
     640:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     644:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     64e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     652:	36 9b       	sbis	0x06, 6	; 6
     654:	f5 cf       	rjmp	.-22     	; 0x640 <CALLBACK_HID_Device_CreateHIDReport+0xf8>
  			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button |= 0b00000010;}
     656:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     65a:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     65e:	aa 0f       	add	r26, r26
     660:	bb 1f       	adc	r27, r27
     662:	a9 5e       	subi	r26, 0xE9	; 233
     664:	be 4f       	sbci	r27, 0xFE	; 254
     666:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     66a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     66e:	2d 91       	ld	r18, X+
     670:	3c 91       	ld	r19, X
     672:	82 1b       	sub	r24, r18
     674:	93 0b       	sbc	r25, r19
     676:	03 96       	adiw	r24, 0x03	; 3
     678:	07 97       	sbiw	r24, 0x07	; 7
     67a:	18 f0       	brcs	.+6      	; 0x682 <CALLBACK_HID_Device_CreateHIDReport+0x13a>
     67c:	83 81       	ldd	r24, Z+3	; 0x03
     67e:	82 60       	ori	r24, 0x02	; 2
     680:	83 83       	std	Z+3, r24	; 0x03
			//break;
 		case 2://PB3
 			DDRB=0b11111111;PORTB=0b00000000;count=0;
     682:	8f ef       	ldi	r24, 0xFF	; 255
     684:	84 b9       	out	0x04, r24	; 4
     686:	15 b8       	out	0x05, r1	; 5
     688:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     68c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     690:	8f e9       	ldi	r24, 0x9F	; 159
     692:	9f e0       	ldi	r25, 0x0F	; 15
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <CALLBACK_HID_Device_CreateHIDReport+0x14c>
     698:	00 c0       	rjmp	.+0      	; 0x69a <CALLBACK_HID_Device_CreateHIDReport+0x152>
     69a:	00 00       	nop
			Delay_MS(1);
			DDRB=0b00000000;while(!(PINB & _BV(PB3))){count++;}
     69c:	14 b8       	out	0x04, r1	; 4
     69e:	1b 99       	sbic	0x03, 3	; 3
     6a0:	0b c0       	rjmp	.+22     	; 0x6b8 <CALLBACK_HID_Device_CreateHIDReport+0x170>
     6a2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     6a6:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     6b0:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     6b4:	1b 9b       	sbis	0x03, 3	; 3
     6b6:	f5 cf       	rjmp	.-22     	; 0x6a2 <CALLBACK_HID_Device_CreateHIDReport+0x15a>
			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button |= 0b00000100;}
     6b8:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     6bc:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     6c0:	aa 0f       	add	r26, r26
     6c2:	bb 1f       	adc	r27, r27
     6c4:	a9 5e       	subi	r26, 0xE9	; 233
     6c6:	be 4f       	sbci	r27, 0xFE	; 254
     6c8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     6cc:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     6d0:	2d 91       	ld	r18, X+
     6d2:	3c 91       	ld	r19, X
     6d4:	82 1b       	sub	r24, r18
     6d6:	93 0b       	sbc	r25, r19
     6d8:	03 96       	adiw	r24, 0x03	; 3
     6da:	07 97       	sbiw	r24, 0x07	; 7
     6dc:	18 f0       	brcs	.+6      	; 0x6e4 <CALLBACK_HID_Device_CreateHIDReport+0x19c>
     6de:	83 81       	ldd	r24, Z+3	; 0x03
     6e0:	84 60       	ori	r24, 0x04	; 4
     6e2:	83 83       	std	Z+3, r24	; 0x03
			//break;
		case 3://PB2
			DDRB=0b11111111;PORTB=0b00000000;count=0;
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	84 b9       	out	0x04, r24	; 4
     6e8:	15 b8       	out	0x05, r1	; 5
     6ea:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     6ee:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     6f2:	8f e9       	ldi	r24, 0x9F	; 159
     6f4:	9f e0       	ldi	r25, 0x0F	; 15
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <CALLBACK_HID_Device_CreateHIDReport+0x1ae>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <CALLBACK_HID_Device_CreateHIDReport+0x1b4>
     6fc:	00 00       	nop
			Delay_MS(1);
			DDRB=0b00000000;while(!(PINB & _BV(PB2))){count++;}
     6fe:	14 b8       	out	0x04, r1	; 4
     700:	1a 99       	sbic	0x03, 2	; 3
     702:	0b c0       	rjmp	.+22     	; 0x71a <CALLBACK_HID_Device_CreateHIDReport+0x1d2>
     704:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     708:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     712:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     716:	1a 9b       	sbis	0x03, 2	; 3
     718:	f5 cf       	rjmp	.-22     	; 0x704 <CALLBACK_HID_Device_CreateHIDReport+0x1bc>
			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button |= 0b00001000;}
     71a:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     71e:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     722:	aa 0f       	add	r26, r26
     724:	bb 1f       	adc	r27, r27
     726:	a9 5e       	subi	r26, 0xE9	; 233
     728:	be 4f       	sbci	r27, 0xFE	; 254
     72a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     72e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     732:	2d 91       	ld	r18, X+
     734:	3c 91       	ld	r19, X
     736:	82 1b       	sub	r24, r18
     738:	93 0b       	sbc	r25, r19
     73a:	03 96       	adiw	r24, 0x03	; 3
     73c:	07 97       	sbiw	r24, 0x07	; 7
     73e:	18 f0       	brcs	.+6      	; 0x746 <CALLBACK_HID_Device_CreateHIDReport+0x1fe>
     740:	83 81       	ldd	r24, Z+3	; 0x03
     742:	88 60       	ori	r24, 0x08	; 8
     744:	83 83       	std	Z+3, r24	; 0x03
			//break;
		case 4://PB1
			DDRB=0b11111111;PORTB=0b00000000;count=0;
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	84 b9       	out	0x04, r24	; 4
     74a:	15 b8       	out	0x05, r1	; 5
     74c:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     750:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     754:	8f e9       	ldi	r24, 0x9F	; 159
     756:	9f e0       	ldi	r25, 0x0F	; 15
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <CALLBACK_HID_Device_CreateHIDReport+0x210>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <CALLBACK_HID_Device_CreateHIDReport+0x216>
     75e:	00 00       	nop
			Delay_MS(1);
			DDRB=0b00000000;while(!(PINB & _BV(PB1))){count++;}
     760:	14 b8       	out	0x04, r1	; 4
     762:	19 99       	sbic	0x03, 1	; 3
     764:	0b c0       	rjmp	.+22     	; 0x77c <CALLBACK_HID_Device_CreateHIDReport+0x234>
     766:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     76a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     774:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     778:	19 9b       	sbis	0x03, 1	; 3
     77a:	f5 cf       	rjmp	.-22     	; 0x766 <CALLBACK_HID_Device_CreateHIDReport+0x21e>
			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button |= 0b00010000;}
     77c:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     780:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     784:	aa 0f       	add	r26, r26
     786:	bb 1f       	adc	r27, r27
     788:	a9 5e       	subi	r26, 0xE9	; 233
     78a:	be 4f       	sbci	r27, 0xFE	; 254
     78c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     790:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     794:	2d 91       	ld	r18, X+
     796:	3c 91       	ld	r19, X
     798:	82 1b       	sub	r24, r18
     79a:	93 0b       	sbc	r25, r19
     79c:	03 96       	adiw	r24, 0x03	; 3
     79e:	07 97       	sbiw	r24, 0x07	; 7
     7a0:	18 f0       	brcs	.+6      	; 0x7a8 <CALLBACK_HID_Device_CreateHIDReport+0x260>
     7a2:	83 81       	ldd	r24, Z+3	; 0x03
     7a4:	80 61       	ori	r24, 0x10	; 16
     7a6:	83 83       	std	Z+3, r24	; 0x03
			//break;
		case 5://PB0
			DDRB=0b11111111;PORTB=0b00000000;count=0;
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	84 b9       	out	0x04, r24	; 4
     7ac:	15 b8       	out	0x05, r1	; 5
     7ae:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     7b2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     7b6:	8f e9       	ldi	r24, 0x9F	; 159
     7b8:	9f e0       	ldi	r25, 0x0F	; 15
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <CALLBACK_HID_Device_CreateHIDReport+0x272>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <CALLBACK_HID_Device_CreateHIDReport+0x278>
     7c0:	00 00       	nop
			Delay_MS(1);
   			DDRB=0b00000000;while(!(PINB & _BV(PB0))){count++;}
     7c2:	14 b8       	out	0x04, r1	; 4
     7c4:	18 99       	sbic	0x03, 0	; 3
     7c6:	0b c0       	rjmp	.+22     	; 0x7de <CALLBACK_HID_Device_CreateHIDReport+0x296>
     7c8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     7cc:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     7d6:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     7da:	18 9b       	sbis	0x03, 0	; 3
     7dc:	f5 cf       	rjmp	.-22     	; 0x7c8 <CALLBACK_HID_Device_CreateHIDReport+0x280>
			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button |= 0b00100000;}
     7de:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     7e2:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     7e6:	aa 0f       	add	r26, r26
     7e8:	bb 1f       	adc	r27, r27
     7ea:	a9 5e       	subi	r26, 0xE9	; 233
     7ec:	be 4f       	sbci	r27, 0xFE	; 254
     7ee:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     7f2:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     7f6:	2d 91       	ld	r18, X+
     7f8:	3c 91       	ld	r19, X
     7fa:	82 1b       	sub	r24, r18
     7fc:	93 0b       	sbc	r25, r19
     7fe:	03 96       	adiw	r24, 0x03	; 3
     800:	07 97       	sbiw	r24, 0x07	; 7
     802:	18 f0       	brcs	.+6      	; 0x80a <CALLBACK_HID_Device_CreateHIDReport+0x2c2>
     804:	83 81       	ldd	r24, Z+3	; 0x03
     806:	80 62       	ori	r24, 0x20	; 32
     808:	83 83       	std	Z+3, r24	; 0x03
			//break;
  		case 6://PF1
   			DDRF=0b11111111;PORTF=0b00000000;count=0;
     80a:	8f ef       	ldi	r24, 0xFF	; 255
     80c:	80 bb       	out	0x10, r24	; 16
     80e:	11 ba       	out	0x11, r1	; 17
     810:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     814:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     818:	8f e9       	ldi	r24, 0x9F	; 159
     81a:	9f e0       	ldi	r25, 0x0F	; 15
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	f1 f7       	brne	.-4      	; 0x81c <CALLBACK_HID_Device_CreateHIDReport+0x2d4>
     820:	00 c0       	rjmp	.+0      	; 0x822 <CALLBACK_HID_Device_CreateHIDReport+0x2da>
     822:	00 00       	nop
   			Delay_MS(1);
   			DDRF=0b00000000;while(!(PINF & _BV(PF1))){count++;}
     824:	10 ba       	out	0x10, r1	; 16
     826:	79 99       	sbic	0x0f, 1	; 15
     828:	0b c0       	rjmp	.+22     	; 0x840 <CALLBACK_HID_Device_CreateHIDReport+0x2f8>
     82a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     82e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     838:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     83c:	79 9b       	sbis	0x0f, 1	; 15
     83e:	f5 cf       	rjmp	.-22     	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x2e2>
   			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button |= 0b01000000;}
     840:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     844:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     848:	aa 0f       	add	r26, r26
     84a:	bb 1f       	adc	r27, r27
     84c:	a9 5e       	subi	r26, 0xE9	; 233
     84e:	be 4f       	sbci	r27, 0xFE	; 254
     850:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     854:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     858:	2d 91       	ld	r18, X+
     85a:	3c 91       	ld	r19, X
     85c:	82 1b       	sub	r24, r18
     85e:	93 0b       	sbc	r25, r19
     860:	03 96       	adiw	r24, 0x03	; 3
     862:	07 97       	sbiw	r24, 0x07	; 7
     864:	18 f0       	brcs	.+6      	; 0x86c <CALLBACK_HID_Device_CreateHIDReport+0x324>
     866:	83 81       	ldd	r24, Z+3	; 0x03
     868:	80 64       	ori	r24, 0x40	; 64
     86a:	83 83       	std	Z+3, r24	; 0x03
   			//break;
   		case 7://PF0
   			DDRF=0b11111111;PORTF=0b00000000;count=0;
     86c:	8f ef       	ldi	r24, 0xFF	; 255
     86e:	80 bb       	out	0x10, r24	; 16
     870:	11 ba       	out	0x11, r1	; 17
     872:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     876:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     87a:	8f e9       	ldi	r24, 0x9F	; 159
     87c:	9f e0       	ldi	r25, 0x0F	; 15
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <CALLBACK_HID_Device_CreateHIDReport+0x336>
     882:	00 c0       	rjmp	.+0      	; 0x884 <CALLBACK_HID_Device_CreateHIDReport+0x33c>
     884:	00 00       	nop
   			Delay_MS(1);
   			DDRF=0b00000000;while(!(PINF & _BV(PF0))){count++;}
     886:	10 ba       	out	0x10, r1	; 16
     888:	78 99       	sbic	0x0f, 0	; 15
     88a:	0b c0       	rjmp	.+22     	; 0x8a2 <CALLBACK_HID_Device_CreateHIDReport+0x35a>
     88c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     890:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     894:	01 96       	adiw	r24, 0x01	; 1
     896:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     89a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     89e:	78 9b       	sbis	0x0f, 0	; 15
     8a0:	f5 cf       	rjmp	.-22     	; 0x88c <CALLBACK_HID_Device_CreateHIDReport+0x344>
   			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button |= 0b10000000;}
     8a2:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     8a6:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     8aa:	aa 0f       	add	r26, r26
     8ac:	bb 1f       	adc	r27, r27
     8ae:	a9 5e       	subi	r26, 0xE9	; 233
     8b0:	be 4f       	sbci	r27, 0xFE	; 254
     8b2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     8b6:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     8ba:	2d 91       	ld	r18, X+
     8bc:	3c 91       	ld	r19, X
     8be:	82 1b       	sub	r24, r18
     8c0:	93 0b       	sbc	r25, r19
     8c2:	03 96       	adiw	r24, 0x03	; 3
     8c4:	07 97       	sbiw	r24, 0x07	; 7
     8c6:	18 f0       	brcs	.+6      	; 0x8ce <CALLBACK_HID_Device_CreateHIDReport+0x386>
     8c8:	83 81       	ldd	r24, Z+3	; 0x03
     8ca:	80 68       	ori	r24, 0x80	; 128
     8cc:	83 83       	std	Z+3, r24	; 0x03
			//break;
		case 8://PD3
  			DDRD=0b11111111;PORTD=0b00000000;count=0;
     8ce:	8f ef       	ldi	r24, 0xFF	; 255
     8d0:	8a b9       	out	0x0a, r24	; 10
     8d2:	1b b8       	out	0x0b, r1	; 11
     8d4:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     8d8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     8dc:	8f e9       	ldi	r24, 0x9F	; 159
     8de:	9f e0       	ldi	r25, 0x0F	; 15
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <CALLBACK_HID_Device_CreateHIDReport+0x398>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <CALLBACK_HID_Device_CreateHIDReport+0x39e>
     8e6:	00 00       	nop
  			Delay_MS(1);
  			DDRD=0b00000000;while(!(PIND & _BV(PD3))){count++;}
     8e8:	1a b8       	out	0x0a, r1	; 10
     8ea:	4b 99       	sbic	0x09, 3	; 9
     8ec:	0b c0       	rjmp	.+22     	; 0x904 <CALLBACK_HID_Device_CreateHIDReport+0x3bc>
     8ee:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     8f2:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     8fc:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     900:	4b 9b       	sbis	0x09, 3	; 9
     902:	f5 cf       	rjmp	.-22     	; 0x8ee <CALLBACK_HID_Device_CreateHIDReport+0x3a6>
 			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button2 |= 0b0000001;}
     904:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     908:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     90c:	aa 0f       	add	r26, r26
     90e:	bb 1f       	adc	r27, r27
     910:	a9 5e       	subi	r26, 0xE9	; 233
     912:	be 4f       	sbci	r27, 0xFE	; 254
     914:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     918:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     91c:	2d 91       	ld	r18, X+
     91e:	3c 91       	ld	r19, X
     920:	82 1b       	sub	r24, r18
     922:	93 0b       	sbc	r25, r19
     924:	03 96       	adiw	r24, 0x03	; 3
     926:	07 97       	sbiw	r24, 0x07	; 7
     928:	18 f0       	brcs	.+6      	; 0x930 <CALLBACK_HID_Device_CreateHIDReport+0x3e8>
     92a:	84 81       	ldd	r24, Z+4	; 0x04
     92c:	81 60       	ori	r24, 0x01	; 1
     92e:	84 83       	std	Z+4, r24	; 0x04
			//break;
 		case 9://PD5
  			DDRD=0b11111111;PORTD=0b00000000;count=0;
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	8a b9       	out	0x0a, r24	; 10
     934:	1b b8       	out	0x0b, r1	; 11
     936:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     93a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     93e:	8f e9       	ldi	r24, 0x9F	; 159
     940:	9f e0       	ldi	r25, 0x0F	; 15
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <CALLBACK_HID_Device_CreateHIDReport+0x3fa>
     946:	00 c0       	rjmp	.+0      	; 0x948 <CALLBACK_HID_Device_CreateHIDReport+0x400>
     948:	00 00       	nop
  			Delay_MS(1);
  			DDRD=0b00000000;while(!(PIND & _BV(PD5))){count++;}
     94a:	1a b8       	out	0x0a, r1	; 10
     94c:	4d 99       	sbic	0x09, 5	; 9
     94e:	0b c0       	rjmp	.+22     	; 0x966 <CALLBACK_HID_Device_CreateHIDReport+0x41e>
     950:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     954:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     95e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     962:	4d 9b       	sbis	0x09, 5	; 9
     964:	f5 cf       	rjmp	.-22     	; 0x950 <CALLBACK_HID_Device_CreateHIDReport+0x408>
  			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button2 |= 0b00000010;}
     966:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     96a:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     96e:	aa 0f       	add	r26, r26
     970:	bb 1f       	adc	r27, r27
     972:	a9 5e       	subi	r26, 0xE9	; 233
     974:	be 4f       	sbci	r27, 0xFE	; 254
     976:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     97a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     97e:	2d 91       	ld	r18, X+
     980:	3c 91       	ld	r19, X
     982:	82 1b       	sub	r24, r18
     984:	93 0b       	sbc	r25, r19
     986:	03 96       	adiw	r24, 0x03	; 3
     988:	07 97       	sbiw	r24, 0x07	; 7
     98a:	18 f0       	brcs	.+6      	; 0x992 <CALLBACK_HID_Device_CreateHIDReport+0x44a>
     98c:	84 81       	ldd	r24, Z+4	; 0x04
     98e:	82 60       	ori	r24, 0x02	; 2
     990:	84 83       	std	Z+4, r24	; 0x04
			//break;
  		case 10://PD6
  			DDRD=0b11111111;PORTD=0b00000000;count=0;
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	8a b9       	out	0x0a, r24	; 10
     996:	1b b8       	out	0x0b, r1	; 11
     998:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     99c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     9a0:	8f e9       	ldi	r24, 0x9F	; 159
     9a2:	9f e0       	ldi	r25, 0x0F	; 15
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <CALLBACK_HID_Device_CreateHIDReport+0x45c>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <CALLBACK_HID_Device_CreateHIDReport+0x462>
     9aa:	00 00       	nop
  			Delay_MS(1);
  			DDRD=0b00000000;while(!(PIND & _BV(PD6))){count++;}
     9ac:	1a b8       	out	0x0a, r1	; 10
     9ae:	4e 99       	sbic	0x09, 6	; 9
     9b0:	0b c0       	rjmp	.+22     	; 0x9c8 <CALLBACK_HID_Device_CreateHIDReport+0x480>
     9b2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     9b6:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     9c0:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     9c4:	4e 9b       	sbis	0x09, 6	; 9
     9c6:	f5 cf       	rjmp	.-22     	; 0x9b2 <CALLBACK_HID_Device_CreateHIDReport+0x46a>
  			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button2 |= 0b00000100;}
     9c8:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     9cc:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     9d0:	aa 0f       	add	r26, r26
     9d2:	bb 1f       	adc	r27, r27
     9d4:	a9 5e       	subi	r26, 0xE9	; 233
     9d6:	be 4f       	sbci	r27, 0xFE	; 254
     9d8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     9dc:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     9e0:	2d 91       	ld	r18, X+
     9e2:	3c 91       	ld	r19, X
     9e4:	82 1b       	sub	r24, r18
     9e6:	93 0b       	sbc	r25, r19
     9e8:	03 96       	adiw	r24, 0x03	; 3
     9ea:	07 97       	sbiw	r24, 0x07	; 7
     9ec:	18 f0       	brcs	.+6      	; 0x9f4 <CALLBACK_HID_Device_CreateHIDReport+0x4ac>
     9ee:	84 81       	ldd	r24, Z+4	; 0x04
     9f0:	84 60       	ori	r24, 0x04	; 4
     9f2:	84 83       	std	Z+4, r24	; 0x04
			//break;
  		case 11://PD4
  			DDRD=0b11111111;PORTD=0b00000000;count=0;
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	8a b9       	out	0x0a, r24	; 10
     9f8:	1b b8       	out	0x0b, r1	; 11
     9fa:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     9fe:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     a02:	8f e9       	ldi	r24, 0x9F	; 159
     a04:	9f e0       	ldi	r25, 0x0F	; 15
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <__DATA_REGION_LENGTH__+0x6>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <__DATA_REGION_LENGTH__+0xc>
     a0c:	00 00       	nop
  			Delay_MS(1);
  			DDRD=0b00000000;while(!(PIND & _BV(PD4))){count++;}
     a0e:	1a b8       	out	0x0a, r1	; 10
     a10:	4c 99       	sbic	0x09, 4	; 9
     a12:	0b c0       	rjmp	.+22     	; 0xa2a <__DATA_REGION_LENGTH__+0x2a>
     a14:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     a18:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     a22:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     a26:	4c 9b       	sbis	0x09, 4	; 9
     a28:	f5 cf       	rjmp	.-22     	; 0xa14 <__DATA_REGION_LENGTH__+0x14>
  			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button2 |= 0b00001000;}
     a2a:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     a2e:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     a32:	aa 0f       	add	r26, r26
     a34:	bb 1f       	adc	r27, r27
     a36:	a9 5e       	subi	r26, 0xE9	; 233
     a38:	be 4f       	sbci	r27, 0xFE	; 254
     a3a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     a3e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     a42:	2d 91       	ld	r18, X+
     a44:	3c 91       	ld	r19, X
     a46:	82 1b       	sub	r24, r18
     a48:	93 0b       	sbc	r25, r19
     a4a:	03 96       	adiw	r24, 0x03	; 3
     a4c:	07 97       	sbiw	r24, 0x07	; 7
     a4e:	18 f0       	brcs	.+6      	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
     a50:	84 81       	ldd	r24, Z+4	; 0x04
     a52:	88 60       	ori	r24, 0x08	; 8
     a54:	84 83       	std	Z+4, r24	; 0x04
			//break;
  		case 12://PB4
  			DDRB=0b11111111;PORTB=0b00000000;count=0;
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	84 b9       	out	0x04, r24	; 4
     a5a:	15 b8       	out	0x05, r1	; 5
     a5c:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     a60:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     a64:	8f e9       	ldi	r24, 0x9F	; 159
     a66:	9f e0       	ldi	r25, 0x0F	; 15
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <__DATA_REGION_LENGTH__+0x68>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <__DATA_REGION_LENGTH__+0x6e>
     a6e:	00 00       	nop
  			Delay_MS(1);
  			DDRB=0b00000000;while(!(PINB & _BV(PB4))){count++;}
     a70:	14 b8       	out	0x04, r1	; 4
     a72:	1c 99       	sbic	0x03, 4	; 3
     a74:	0b c0       	rjmp	.+22     	; 0xa8c <__DATA_REGION_LENGTH__+0x8c>
     a76:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     a7a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     a84:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     a88:	1c 9b       	sbis	0x03, 4	; 3
     a8a:	f5 cf       	rjmp	.-22     	; 0xa76 <__DATA_REGION_LENGTH__+0x76>
  			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button2 |= 0b00010000;}
     a8c:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     a90:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     a94:	aa 0f       	add	r26, r26
     a96:	bb 1f       	adc	r27, r27
     a98:	a9 5e       	subi	r26, 0xE9	; 233
     a9a:	be 4f       	sbci	r27, 0xFE	; 254
     a9c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     aa0:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     aa4:	2d 91       	ld	r18, X+
     aa6:	3c 91       	ld	r19, X
     aa8:	82 1b       	sub	r24, r18
     aaa:	93 0b       	sbc	r25, r19
     aac:	03 96       	adiw	r24, 0x03	; 3
     aae:	07 97       	sbiw	r24, 0x07	; 7
     ab0:	18 f0       	brcs	.+6      	; 0xab8 <__DATA_REGION_LENGTH__+0xb8>
     ab2:	84 81       	ldd	r24, Z+4	; 0x04
     ab4:	80 61       	ori	r24, 0x10	; 16
     ab6:	84 83       	std	Z+4, r24	; 0x04
			//break;
  		case 13://PD7
  			DDRD=0b11111111;PORTD=0b00000000;count=0;
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	8a b9       	out	0x0a, r24	; 10
     abc:	1b b8       	out	0x0b, r1	; 11
     abe:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     ac2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     ac6:	8f e9       	ldi	r24, 0x9F	; 159
     ac8:	9f e0       	ldi	r25, 0x0F	; 15
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	f1 f7       	brne	.-4      	; 0xaca <__DATA_REGION_LENGTH__+0xca>
     ace:	00 c0       	rjmp	.+0      	; 0xad0 <__DATA_REGION_LENGTH__+0xd0>
     ad0:	00 00       	nop
  			Delay_MS(1);
  			DDRD=0b00000000;while(!(PIND & _BV(PD7))){count++;}
     ad2:	1a b8       	out	0x0a, r1	; 10
     ad4:	4f 99       	sbic	0x09, 7	; 9
     ad6:	0b c0       	rjmp	.+22     	; 0xaee <__DATA_REGION_LENGTH__+0xee>
     ad8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     adc:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     ae6:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     aea:	4f 9b       	sbis	0x09, 7	; 9
     aec:	f5 cf       	rjmp	.-22     	; 0xad8 <__DATA_REGION_LENGTH__+0xd8>
  			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button2 |= 0b00100000;}
     aee:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     af2:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     af6:	aa 0f       	add	r26, r26
     af8:	bb 1f       	adc	r27, r27
     afa:	a9 5e       	subi	r26, 0xE9	; 233
     afc:	be 4f       	sbci	r27, 0xFE	; 254
     afe:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     b02:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     b06:	2d 91       	ld	r18, X+
     b08:	3c 91       	ld	r19, X
     b0a:	82 1b       	sub	r24, r18
     b0c:	93 0b       	sbc	r25, r19
     b0e:	03 96       	adiw	r24, 0x03	; 3
     b10:	07 97       	sbiw	r24, 0x07	; 7
     b12:	18 f0       	brcs	.+6      	; 0xb1a <__stack+0x1b>
     b14:	84 81       	ldd	r24, Z+4	; 0x04
     b16:	80 62       	ori	r24, 0x20	; 32
     b18:	84 83       	std	Z+4, r24	; 0x04
			//break;
  		case 14://PB6
  			DDRB=0b11111111;PORTB=0b00000000;count=0;
     b1a:	8f ef       	ldi	r24, 0xFF	; 255
     b1c:	84 b9       	out	0x04, r24	; 4
     b1e:	15 b8       	out	0x05, r1	; 5
     b20:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     b24:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     b28:	8f e9       	ldi	r24, 0x9F	; 159
     b2a:	9f e0       	ldi	r25, 0x0F	; 15
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <__stack+0x2d>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <__stack+0x33>
     b32:	00 00       	nop
  			Delay_MS(1);
  			DDRB=0b00000000;while(!(PINB & _BV(PB6))){count++;}
     b34:	14 b8       	out	0x04, r1	; 4
     b36:	1e 99       	sbic	0x03, 6	; 3
     b38:	0b c0       	rjmp	.+22     	; 0xb50 <__stack+0x51>
     b3a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     b3e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     b48:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     b4c:	1e 9b       	sbis	0x03, 6	; 3
     b4e:	f5 cf       	rjmp	.-22     	; 0xb3a <__stack+0x3b>
  			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button2 |= 0b01000000;}
     b50:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     b54:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     b58:	aa 0f       	add	r26, r26
     b5a:	bb 1f       	adc	r27, r27
     b5c:	a9 5e       	subi	r26, 0xE9	; 233
     b5e:	be 4f       	sbci	r27, 0xFE	; 254
     b60:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     b64:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     b68:	2d 91       	ld	r18, X+
     b6a:	3c 91       	ld	r19, X
     b6c:	82 1b       	sub	r24, r18
     b6e:	93 0b       	sbc	r25, r19
     b70:	03 96       	adiw	r24, 0x03	; 3
     b72:	07 97       	sbiw	r24, 0x07	; 7
     b74:	18 f0       	brcs	.+6      	; 0xb7c <__stack+0x7d>
     b76:	84 81       	ldd	r24, Z+4	; 0x04
     b78:	80 64       	ori	r24, 0x40	; 64
     b7a:	84 83       	std	Z+4, r24	; 0x04
			//break;
  		case 15://PB5
  			DDRB=0b11111111;PORTB=0b00000000;count=0;
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	84 b9       	out	0x04, r24	; 4
     b80:	15 b8       	out	0x05, r1	; 5
     b82:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <count+0x1>
     b86:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <count>
     b8a:	8f e9       	ldi	r24, 0x9F	; 159
     b8c:	9f e0       	ldi	r25, 0x0F	; 15
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	f1 f7       	brne	.-4      	; 0xb8e <__stack+0x8f>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <__stack+0x95>
     b94:	00 00       	nop
  			Delay_MS(1);
  			DDRB=0b00000000;while(!(PINB & _BV(PB5))){count++;}
     b96:	14 b8       	out	0x04, r1	; 4
     b98:	1d 99       	sbic	0x03, 5	; 3
     b9a:	0b c0       	rjmp	.+22     	; 0xbb2 <__stack+0xb3>
     b9c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     ba0:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <count+0x1>
     baa:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <count>
     bae:	1d 9b       	sbis	0x03, 5	; 3
     bb0:	f5 cf       	rjmp	.-22     	; 0xb9c <__stack+0x9d>
  			if(count-thresholds[num]<-THRESH_DIFF||THRESH_DIFF<count-thresholds[num]){JoystickReport->Button2 |= 0b10000000;}
     bb2:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end>
     bb6:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x1>
     bba:	aa 0f       	add	r26, r26
     bbc:	bb 1f       	adc	r27, r27
     bbe:	a9 5e       	subi	r26, 0xE9	; 233
     bc0:	be 4f       	sbci	r27, 0xFE	; 254
     bc2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <count>
     bc6:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <count+0x1>
     bca:	2d 91       	ld	r18, X+
     bcc:	3c 91       	ld	r19, X
     bce:	82 1b       	sub	r24, r18
     bd0:	93 0b       	sbc	r25, r19
     bd2:	03 96       	adiw	r24, 0x03	; 3
     bd4:	07 97       	sbiw	r24, 0x07	; 7
     bd6:	18 f0       	brcs	.+6      	; 0xbde <__stack+0xdf>
     bd8:	84 81       	ldd	r24, Z+4	; 0x04
     bda:	80 68       	ori	r24, 0x80	; 128
     bdc:	84 83       	std	Z+4, r24	; 0x04
			//break;
	}
	//num++;
	//if(num>=16)num=0;
	*ReportSize = sizeof(USB_JoystickReport_Data_t);
     bde:	85 e0       	ldi	r24, 0x05	; 5
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	f8 01       	movw	r30, r16
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	80 83       	st	Z, r24
	return false;
}
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	08 95       	ret

00000bf0 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     bf0:	08 95       	ret

00000bf2 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     bf2:	3f 92       	push	r3
     bf4:	4f 92       	push	r4
     bf6:	5f 92       	push	r5
     bf8:	6f 92       	push	r6
     bfa:	7f 92       	push	r7
     bfc:	8f 92       	push	r8
     bfe:	9f 92       	push	r9
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	00 d0       	rcall	.+0      	; 0xc16 <HID_Device_ProcessControlRequest+0x24>
     c16:	1f 92       	push	r1
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     c1e:	ed b6       	in	r14, 0x3d	; 61
     c20:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     c26:	83 ff       	sbrs	r24, 3
     c28:	13 c1       	rjmp	.+550    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     c2a:	f6 01       	movw	r30, r12
     c2c:	80 81       	ld	r24, Z
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <USB_ControlRequest+0x4>
     c34:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <USB_ControlRequest+0x5>
     c38:	28 17       	cp	r18, r24
     c3a:	39 07       	cpc	r19, r25
     c3c:	09 f0       	breq	.+2      	; 0xc40 <HID_Device_ProcessControlRequest+0x4e>
     c3e:	08 c1       	rjmp	.+528    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
	  return;

	switch (USB_ControlRequest.bRequest)
     c40:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <USB_ControlRequest+0x1>
     c44:	83 30       	cpi	r24, 0x03	; 3
     c46:	09 f4       	brne	.+2      	; 0xc4a <HID_Device_ProcessControlRequest+0x58>
     c48:	a0 c0       	rjmp	.+320    	; 0xd8a <HID_Device_ProcessControlRequest+0x198>
     c4a:	30 f4       	brcc	.+12     	; 0xc58 <HID_Device_ProcessControlRequest+0x66>
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	71 f0       	breq	.+28     	; 0xc6c <HID_Device_ProcessControlRequest+0x7a>
     c50:	82 30       	cpi	r24, 0x02	; 2
     c52:	09 f4       	brne	.+2      	; 0xc56 <HID_Device_ProcessControlRequest+0x64>
     c54:	e2 c0       	rjmp	.+452    	; 0xe1a <HID_Device_ProcessControlRequest+0x228>
     c56:	fc c0       	rjmp	.+504    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
     c58:	8a 30       	cpi	r24, 0x0A	; 10
     c5a:	09 f4       	brne	.+2      	; 0xc5e <HID_Device_ProcessControlRequest+0x6c>
     c5c:	c2 c0       	rjmp	.+388    	; 0xde2 <HID_Device_ProcessControlRequest+0x1f0>
     c5e:	8b 30       	cpi	r24, 0x0B	; 11
     c60:	09 f4       	brne	.+2      	; 0xc64 <HID_Device_ProcessControlRequest+0x72>
     c62:	ab c0       	rjmp	.+342    	; 0xdba <HID_Device_ProcessControlRequest+0x1c8>
     c64:	89 30       	cpi	r24, 0x09	; 9
     c66:	09 f0       	breq	.+2      	; 0xc6a <HID_Device_ProcessControlRequest+0x78>
     c68:	f3 c0       	rjmp	.+486    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
     c6a:	51 c0       	rjmp	.+162    	; 0xd0e <HID_Device_ProcessControlRequest+0x11c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     c6c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest>
     c70:	81 3a       	cpi	r24, 0xA1	; 161
     c72:	09 f0       	breq	.+2      	; 0xc76 <HID_Device_ProcessControlRequest+0x84>
     c74:	ed c0       	rjmp	.+474    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
			{
     c76:	ad b6       	in	r10, 0x3d	; 61
     c78:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
     c7a:	1a 82       	std	Y+2, r1	; 0x02
     c7c:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     c7e:	ee e3       	ldi	r30, 0x3E	; 62
     c80:	f1 e0       	ldi	r31, 0x01	; 1
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	13 81       	ldd	r17, Z+3	; 0x03
     c86:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     c88:	f6 01       	movw	r30, r12
     c8a:	80 85       	ldd	r24, Z+8	; 0x08
     c8c:	48 2f       	mov	r20, r24
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	8d b7       	in	r24, 0x3d	; 61
     c92:	9e b7       	in	r25, 0x3e	; 62
     c94:	84 1b       	sub	r24, r20
     c96:	95 0b       	sbc	r25, r21
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	9e bf       	out	0x3e, r25	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	8d bf       	out	0x3d, r24	; 61
     ca2:	ed b7       	in	r30, 0x3d	; 61
     ca4:	fe b7       	in	r31, 0x3e	; 62
     ca6:	31 96       	adiw	r30, 0x01	; 1
     ca8:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	cf 01       	movw	r24, r30
     cb0:	a8 d7       	rcall	.+3920   	; 0x1c02 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     cb2:	4f ef       	ldi	r20, 0xFF	; 255
     cb4:	41 0f       	add	r20, r17
     cb6:	8e 01       	movw	r16, r28
     cb8:	0f 5f       	subi	r16, 0xFF	; 255
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	94 01       	movw	r18, r8
     cbe:	be 01       	movw	r22, r28
     cc0:	6d 5f       	subi	r22, 0xFD	; 253
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	c6 01       	movw	r24, r12
     cc6:	40 dc       	rcall	.-1920   	; 0x548 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     cc8:	f6 01       	movw	r30, r12
     cca:	86 81       	ldd	r24, Z+6	; 0x06
     ccc:	97 81       	ldd	r25, Z+7	; 0x07
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	21 f0       	breq	.+8      	; 0xcda <HID_Device_ProcessControlRequest+0xe8>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     cd2:	40 85       	ldd	r20, Z+8	; 0x08
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	b4 01       	movw	r22, r8
     cd8:	8b d7       	rcall	.+3862   	; 0x1bf0 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cda:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cde:	e8 ee       	ldi	r30, 0xE8	; 232
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	87 7f       	andi	r24, 0xF7	; 247
     ce6:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     cf0:	69 81       	ldd	r22, Y+1	; 0x01
     cf2:	7a 81       	ldd	r23, Y+2	; 0x02
     cf4:	c4 01       	movw	r24, r8
     cf6:	f4 d1       	rcall	.+1000   	; 0x10e0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cf8:	e8 ee       	ldi	r30, 0xE8	; 232
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8b 77       	andi	r24, 0x7B	; 123
     d00:	80 83       	st	Z, r24
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	be be       	out	0x3e, r11	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	ad be       	out	0x3d, r10	; 61
     d0c:	a1 c0       	rjmp	.+322    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d0e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest>
     d12:	81 32       	cpi	r24, 0x21	; 33
     d14:	09 f0       	breq	.+2      	; 0xd18 <HID_Device_ProcessControlRequest+0x126>
     d16:	9c c0       	rjmp	.+312    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
			{
     d18:	6d b6       	in	r6, 0x3d	; 61
     d1a:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
     d1c:	ee e3       	ldi	r30, 0x3E	; 62
     d1e:	f1 e0       	ldi	r31, 0x01	; 1
     d20:	06 81       	ldd	r16, Z+6	; 0x06
     d22:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d24:	52 80       	ldd	r5, Z+2	; 0x02
     d26:	43 80       	ldd	r4, Z+3	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     d28:	8d b7       	in	r24, 0x3d	; 61
     d2a:	9e b7       	in	r25, 0x3e	; 62
     d2c:	80 1b       	sub	r24, r16
     d2e:	91 0b       	sbc	r25, r17
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	9e bf       	out	0x3e, r25	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	8d bf       	out	0x3d, r24	; 61
     d3a:	ed b7       	in	r30, 0x3d	; 61
     d3c:	fe b7       	in	r31, 0x3e	; 62
     d3e:	31 96       	adiw	r30, 0x01	; 1
     d40:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d42:	0f 2e       	mov	r0, r31
     d44:	f8 ee       	ldi	r31, 0xE8	; 232
     d46:	af 2e       	mov	r10, r31
     d48:	b1 2c       	mov	r11, r1
     d4a:	f0 2d       	mov	r31, r0
     d4c:	f5 01       	movw	r30, r10
     d4e:	80 81       	ld	r24, Z
     d50:	87 7f       	andi	r24, 0xF7	; 247

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     d52:	80 83       	st	Z, r24
     d54:	b8 01       	movw	r22, r16
     d56:	c4 01       	movw	r24, r8
     d58:	47 d2       	rcall	.+1166   	; 0x11e8 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d5a:	f5 01       	movw	r30, r10
     d5c:	80 81       	ld	r24, Z
     d5e:	8e 77       	andi	r24, 0x7E	; 126
     d60:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	51 10       	cpse	r5, r1
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <HID_Device_ProcessControlRequest+0x178>
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	02 1b       	sub	r16, r18
     d6e:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     d70:	28 0d       	add	r18, r8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     d72:	39 1d       	adc	r19, r9
     d74:	4f ef       	ldi	r20, 0xFF	; 255
     d76:	44 0d       	add	r20, r4
     d78:	65 2d       	mov	r22, r5
     d7a:	c6 01       	movw	r24, r12
     d7c:	39 df       	rcall	.-398    	; 0xbf0 <CALLBACK_HID_Device_ProcessHIDReport>
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	7e be       	out	0x3e, r7	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	6d be       	out	0x3d, r6	; 61
     d88:	63 c0       	rjmp	.+198    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d8a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest>
     d8e:	81 3a       	cpi	r24, 0xA1	; 161
     d90:	09 f0       	breq	.+2      	; 0xd94 <HID_Device_ProcessControlRequest+0x1a2>
     d92:	5e c0       	rjmp	.+188    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d94:	e8 ee       	ldi	r30, 0xE8	; 232
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	87 7f       	andi	r24, 0xF7	; 247
     d9c:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d9e:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     da0:	80 ff       	sbrs	r24, 0
     da2:	fd cf       	rjmp	.-6      	; 0xd9e <HID_Device_ProcessControlRequest+0x1ac>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     da4:	f6 01       	movw	r30, r12
     da6:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     da8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dac:	e8 ee       	ldi	r30, 0xE8	; 232
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     db4:	80 83       	st	Z, r24
     db6:	cc d3       	rcall	.+1944   	; 0x1550 <Endpoint_ClearStatusStage>
     db8:	4b c0       	rjmp	.+150    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dba:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest>
     dbe:	81 32       	cpi	r24, 0x21	; 33
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <HID_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dc2:	46 c0       	rjmp	.+140    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
     dc4:	e8 ee       	ldi	r30, 0xE8	; 232
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     dcc:	80 83       	st	Z, r24
     dce:	c0 d3       	rcall	.+1920   	; 0x1550 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     dd0:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	91 11       	cpse	r25, r1
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <HID_Device_ProcessControlRequest+0x1ea>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	f6 01       	movw	r30, r12
     dde:	81 87       	std	Z+9, r24	; 0x09
     de0:	37 c0       	rjmp	.+110    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     de2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest>
     de6:	81 32       	cpi	r24, 0x21	; 33
     de8:	99 f5       	brne	.+102    	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
     dea:	e8 ee       	ldi	r30, 0xE8	; 232
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     df2:	80 83       	st	Z, r24
     df4:	ad d3       	rcall	.+1882   	; 0x1550 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     df6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
     dfa:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <USB_ControlRequest+0x3>
     dfe:	88 27       	eor	r24, r24
     e00:	00 24       	eor	r0, r0
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	00 1c       	adc	r0, r0
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	00 1c       	adc	r0, r0
     e0e:	89 2f       	mov	r24, r25
     e10:	90 2d       	mov	r25, r0
     e12:	f6 01       	movw	r30, r12
     e14:	95 87       	std	Z+13, r25	; 0x0d
     e16:	84 87       	std	Z+12, r24	; 0x0c
     e18:	1b c0       	rjmp	.+54     	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e1a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest>
     e1e:	81 3a       	cpi	r24, 0xA1	; 161
     e20:	b9 f4       	brne	.+46     	; 0xe50 <HID_Device_ProcessControlRequest+0x25e>
     e22:	e8 ee       	ldi	r30, 0xE8	; 232
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	87 7f       	andi	r24, 0xF7	; 247
     e2a:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e2c:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     e2e:	80 ff       	sbrs	r24, 0
     e30:	fd cf       	rjmp	.-6      	; 0xe2c <HID_Device_ProcessControlRequest+0x23a>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     e32:	f6 01       	movw	r30, r12
     e34:	84 85       	ldd	r24, Z+12	; 0x0c
     e36:	95 85       	ldd	r25, Z+13	; 0x0d
     e38:	96 95       	lsr	r25
     e3a:	87 95       	ror	r24
     e3c:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e3e:	87 95       	ror	r24
     e40:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e44:	e8 ee       	ldi	r30, 0xE8	; 232
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     e4c:	80 83       	st	Z, r24
     e4e:	80 d3       	rcall	.+1792   	; 0x1550 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	fe be       	out	0x3e, r15	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	ed be       	out	0x3d, r14	; 61
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	bf 90       	pop	r11
     e72:	af 90       	pop	r10
     e74:	9f 90       	pop	r9
     e76:	8f 90       	pop	r8
     e78:	7f 90       	pop	r7
     e7a:	6f 90       	pop	r6
     e7c:	5f 90       	pop	r5
     e7e:	4f 90       	pop	r4
     e80:	3f 90       	pop	r3
     e82:	08 95       	ret

00000e84 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     e84:	fc 01       	movw	r30, r24
     e86:	39 96       	adiw	r30, 0x09	; 9
     e88:	27 e0       	ldi	r18, 0x07	; 7
     e8a:	df 01       	movw	r26, r30
     e8c:	1d 92       	st	X+, r1
     e8e:	2a 95       	dec	r18
     e90:	e9 f7       	brne	.-6      	; 0xe8c <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     e92:	21 e0       	ldi	r18, 0x01	; 1
     e94:	fc 01       	movw	r30, r24
     e96:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     e98:	24 ef       	ldi	r18, 0xF4	; 244
     e9a:	31 e0       	ldi	r19, 0x01	; 1
     e9c:	35 87       	std	Z+13, r19	; 0x0d
     e9e:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     ea0:	23 e0       	ldi	r18, 0x03	; 3
     ea2:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	04 c3       	rjmp	.+1544   	; 0x14b2 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
     eaa:	08 95       	ret

00000eac <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     eac:	5f 92       	push	r5
     eae:	6f 92       	push	r6
     eb0:	7f 92       	push	r7
     eb2:	8f 92       	push	r8
     eb4:	9f 92       	push	r9
     eb6:	af 92       	push	r10
     eb8:	bf 92       	push	r11
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	00 d0       	rcall	.+0      	; 0xecc <HID_Device_USBTask+0x20>
     ecc:	1f 92       	push	r1
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     ed4:	ad b6       	in	r10, 0x3d	; 61
     ed6:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     ed8:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
     edc:	84 30       	cpi	r24, 0x04	; 4
     ede:	09 f0       	breq	.+2      	; 0xee2 <HID_Device_USBTask+0x36>
     ee0:	8a c0       	rjmp	.+276    	; 0xff6 <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     ee2:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
     ee6:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     eea:	f7 01       	movw	r30, r14
     eec:	22 85       	ldd	r18, Z+10	; 0x0a
     eee:	33 85       	ldd	r19, Z+11	; 0x0b
     ef0:	28 17       	cp	r18, r24
     ef2:	39 07       	cpc	r19, r25
     ef4:	09 f4       	brne	.+2      	; 0xef8 <HID_Device_USBTask+0x4c>
     ef6:	7f c0       	rjmp	.+254    	; 0xff6 <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ef8:	81 81       	ldd	r24, Z+1	; 0x01
     efa:	8f 70       	andi	r24, 0x0F	; 15
     efc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     f04:	85 ff       	sbrs	r24, 5
     f06:	77 c0       	rjmp	.+238    	; 0xff6 <HID_Device_USBTask+0x14a>
	{
     f08:	8d b6       	in	r8, 0x3d	; 61
     f0a:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f0c:	40 85       	ldd	r20, Z+8	; 0x08
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	8d b7       	in	r24, 0x3d	; 61
     f12:	9e b7       	in	r25, 0x3e	; 62
     f14:	84 1b       	sub	r24, r20
     f16:	95 0b       	sbc	r25, r21
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	9e bf       	out	0x3e, r25	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	8d bf       	out	0x3d, r24	; 61
     f22:	ed b7       	in	r30, 0x3d	; 61
     f24:	fe b7       	in	r31, 0x3e	; 62
     f26:	31 96       	adiw	r30, 0x01	; 1
     f28:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     f2a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     f2c:	1a 82       	std	Y+2, r1	; 0x02
     f2e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	cf 01       	movw	r24, r30
     f36:	65 d6       	rcall	.+3274   	; 0x1c02 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     f38:	8e 01       	movw	r16, r28
     f3a:	0f 5f       	subi	r16, 0xFF	; 255
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
     f3e:	96 01       	movw	r18, r12
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	be 01       	movw	r22, r28
     f44:	6d 5f       	subi	r22, 0xFD	; 253
     f46:	7f 4f       	sbci	r23, 0xFF	; 255
     f48:	c7 01       	movw	r24, r14
     f4a:	fe da       	rcall	.-2564   	; 0x548 <CALLBACK_HID_Device_CreateHIDReport>
     f4c:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     f4e:	f7 01       	movw	r30, r14
     f50:	84 85       	ldd	r24, Z+12	; 0x0c
     f52:	95 85       	ldd	r25, Z+13	; 0x0d
     f54:	89 2b       	or	r24, r25
     f56:	41 f0       	breq	.+16     	; 0xf68 <HID_Device_USBTask+0xbc>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	26 85       	ldd	r18, Z+14	; 0x0e
     f5c:	37 85       	ldd	r19, Z+15	; 0x0f
     f5e:	23 2b       	or	r18, r19
     f60:	09 f0       	breq	.+2      	; 0xf64 <HID_Device_USBTask+0xb8>
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	78 2e       	mov	r7, r24
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <HID_Device_USBTask+0xbe>
     f68:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f6a:	f7 01       	movw	r30, r14
     f6c:	06 81       	ldd	r16, Z+6	; 0x06
     f6e:	17 81       	ldd	r17, Z+7	; 0x07
     f70:	01 15       	cp	r16, r1
     f72:	11 05       	cpc	r17, r1
     f74:	89 f0       	breq	.+34     	; 0xf98 <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     f76:	49 81       	ldd	r20, Y+1	; 0x01
     f78:	5a 81       	ldd	r21, Y+2	; 0x02
     f7a:	b8 01       	movw	r22, r16
     f7c:	c6 01       	movw	r24, r12
     f7e:	2b d6       	rcall	.+3158   	; 0x1bd6 <memcmp>
     f80:	66 24       	eor	r6, r6
     f82:	63 94       	inc	r6
     f84:	89 2b       	or	r24, r25
     f86:	09 f4       	brne	.+2      	; 0xf8a <HID_Device_USBTask+0xde>
     f88:	61 2c       	mov	r6, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     f8a:	f7 01       	movw	r30, r14
     f8c:	40 85       	ldd	r20, Z+8	; 0x08
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	b6 01       	movw	r22, r12
     f92:	c8 01       	movw	r24, r16
     f94:	2d d6       	rcall	.+3162   	; 0x1bf0 <memcpy>
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <HID_Device_USBTask+0xee>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     f98:	61 2c       	mov	r6, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	89 2b       	or	r24, r25
     fa0:	f1 f0       	breq	.+60     	; 0xfde <HID_Device_USBTask+0x132>
     fa2:	51 10       	cpse	r5, r1
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <HID_Device_USBTask+0x102>
     fa6:	61 10       	cpse	r6, r1
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <HID_Device_USBTask+0x102>
     faa:	70 fe       	sbrs	r7, 0
     fac:	18 c0       	rjmp	.+48     	; 0xfde <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     fae:	f7 01       	movw	r30, r14
     fb0:	84 85       	ldd	r24, Z+12	; 0x0c
     fb2:	95 85       	ldd	r25, Z+13	; 0x0d
     fb4:	97 87       	std	Z+15, r25	; 0x0f
     fb6:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fb8:	81 81       	ldd	r24, Z+1	; 0x01
     fba:	8f 70       	andi	r24, 0x0F	; 15
     fbc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fc4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     fc8:	69 81       	ldd	r22, Y+1	; 0x01
     fca:	7a 81       	ldd	r23, Y+2	; 0x02
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	c6 01       	movw	r24, r12
     fd2:	29 d0       	rcall	.+82     	; 0x1026 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fd4:	e8 ee       	ldi	r30, 0xE8	; 232
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8e 77       	andi	r24, 0x7E	; 126
     fdc:	80 83       	st	Z, r24
     fde:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
     fe2:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     fe6:	f7 01       	movw	r30, r14
     fe8:	93 87       	std	Z+11, r25	; 0x0b
     fea:	82 87       	std	Z+10, r24	; 0x0a
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	9e be       	out	0x3e, r9	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	8d be       	out	0x3d, r8	; 61
	}
}
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	be be       	out	0x3e, r11	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	ad be       	out	0x3d, r10	; 61
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	df 90       	pop	r13
    1014:	cf 90       	pop	r12
    1016:	bf 90       	pop	r11
    1018:	af 90       	pop	r10
    101a:	9f 90       	pop	r9
    101c:	8f 90       	pop	r8
    101e:	7f 90       	pop	r7
    1020:	6f 90       	pop	r6
    1022:	5f 90       	pop	r5
    1024:	08 95       	ret

00001026 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1026:	8f 92       	push	r8
    1028:	9f 92       	push	r9
    102a:	af 92       	push	r10
    102c:	bf 92       	push	r11
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	8c 01       	movw	r16, r24
    1040:	eb 01       	movw	r28, r22
    1042:	5a 01       	movw	r10, r20
    1044:	a9 d2       	rcall	.+1362   	; 0x1598 <Endpoint_WaitUntilReady>
    1046:	81 11       	cpse	r24, r1
    1048:	3e c0       	rjmp	.+124    	; 0x10c6 <Endpoint_Write_Stream_LE+0xa0>
    104a:	a1 14       	cp	r10, r1
    104c:	b1 04       	cpc	r11, r1
    104e:	39 f0       	breq	.+14     	; 0x105e <Endpoint_Write_Stream_LE+0x38>
    1050:	f5 01       	movw	r30, r10
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	c8 1b       	sub	r28, r24
    1058:	d9 0b       	sbc	r29, r25
    105a:	08 0f       	add	r16, r24
    105c:	19 1f       	adc	r17, r25
    105e:	20 97       	sbiw	r28, 0x00	; 0
    1060:	89 f1       	breq	.+98     	; 0x10c4 <Endpoint_Write_Stream_LE+0x9e>
    1062:	e1 2c       	mov	r14, r1
    1064:	f1 2c       	mov	r15, r1
    1066:	0f 2e       	mov	r0, r31
    1068:	f8 ee       	ldi	r31, 0xE8	; 232
    106a:	8f 2e       	mov	r8, r31
    106c:	91 2c       	mov	r9, r1
    106e:	f0 2d       	mov	r31, r0
    1070:	0f 2e       	mov	r0, r31
    1072:	f1 ef       	ldi	r31, 0xF1	; 241
    1074:	cf 2e       	mov	r12, r31
    1076:	d1 2c       	mov	r13, r1
    1078:	f0 2d       	mov	r31, r0
    107a:	f4 01       	movw	r30, r8
    107c:	80 81       	ld	r24, Z
    107e:	85 fd       	sbrc	r24, 5
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <Endpoint_Write_Stream_LE+0x84>
    1082:	80 81       	ld	r24, Z
    1084:	8e 77       	andi	r24, 0x7E	; 126
    1086:	80 83       	st	Z, r24
    1088:	65 d5       	rcall	.+2762   	; 0x1b54 <USB_USBTask>
    108a:	a1 14       	cp	r10, r1
    108c:	b1 04       	cpc	r11, r1
    108e:	49 f0       	breq	.+18     	; 0x10a2 <Endpoint_Write_Stream_LE+0x7c>
    1090:	f5 01       	movw	r30, r10
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	e8 0e       	add	r14, r24
    1098:	f9 1e       	adc	r15, r25
    109a:	f1 82       	std	Z+1, r15	; 0x01
    109c:	e0 82       	st	Z, r14
    109e:	85 e0       	ldi	r24, 0x05	; 5
    10a0:	12 c0       	rjmp	.+36     	; 0x10c6 <Endpoint_Write_Stream_LE+0xa0>
    10a2:	7a d2       	rcall	.+1268   	; 0x1598 <Endpoint_WaitUntilReady>
    10a4:	88 23       	and	r24, r24
    10a6:	51 f0       	breq	.+20     	; 0x10bc <Endpoint_Write_Stream_LE+0x96>
    10a8:	0e c0       	rjmp	.+28     	; 0x10c6 <Endpoint_Write_Stream_LE+0xa0>
    10aa:	f8 01       	movw	r30, r16
    10ac:	81 91       	ld	r24, Z+
    10ae:	8f 01       	movw	r16, r30
    10b0:	f6 01       	movw	r30, r12
    10b2:	80 83       	st	Z, r24
    10b4:	21 97       	sbiw	r28, 0x01	; 1
    10b6:	ff ef       	ldi	r31, 0xFF	; 255
    10b8:	ef 1a       	sub	r14, r31
    10ba:	ff 0a       	sbc	r15, r31
    10bc:	20 97       	sbiw	r28, 0x00	; 0
    10be:	e9 f6       	brne	.-70     	; 0x107a <Endpoint_Write_Stream_LE+0x54>
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <Endpoint_Write_Stream_LE+0xa0>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	bf 90       	pop	r11
    10d8:	af 90       	pop	r10
    10da:	9f 90       	pop	r9
    10dc:	8f 90       	pop	r8
    10de:	08 95       	ret

000010e0 <Endpoint_Write_Control_Stream_LE>:
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <USB_ControlRequest+0x6>
    10f2:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <USB_ControlRequest+0x7>
    10f6:	26 17       	cp	r18, r22
    10f8:	37 07       	cpc	r19, r23
    10fa:	58 f0       	brcs	.+22     	; 0x1112 <Endpoint_Write_Control_Stream_LE+0x32>
    10fc:	61 15       	cp	r22, r1
    10fe:	71 05       	cpc	r23, r1
    1100:	39 f4       	brne	.+14     	; 0x1110 <Endpoint_Write_Control_Stream_LE+0x30>
    1102:	e8 ee       	ldi	r30, 0xE8	; 232
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	20 81       	ld	r18, Z
    1108:	2e 77       	andi	r18, 0x7E	; 126
    110a:	20 83       	st	Z, r18
    110c:	9b 01       	movw	r18, r22
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <Endpoint_Write_Control_Stream_LE+0x32>
    1110:	9b 01       	movw	r18, r22
    1112:	a8 2f       	mov	r26, r24
    1114:	b9 2f       	mov	r27, r25
    1116:	10 e0       	ldi	r17, 0x00	; 0
    1118:	e8 ee       	ldi	r30, 0xE8	; 232
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	63 ef       	ldi	r22, 0xF3	; 243
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	42 ef       	ldi	r20, 0xF2	; 242
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	0f 2e       	mov	r0, r31
    1126:	f1 ef       	ldi	r31, 0xF1	; 241
    1128:	cf 2e       	mov	r12, r31
    112a:	d1 2c       	mov	r13, r1
    112c:	f0 2d       	mov	r31, r0
    112e:	01 e0       	ldi	r16, 0x01	; 1
    1130:	f1 2c       	mov	r15, r1
    1132:	30 c0       	rjmp	.+96     	; 0x1194 <Endpoint_Write_Control_Stream_LE+0xb4>
    1134:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
    1138:	88 23       	and	r24, r24
    113a:	09 f4       	brne	.+2      	; 0x113e <Endpoint_Write_Control_Stream_LE+0x5e>
    113c:	42 c0       	rjmp	.+132    	; 0x11c2 <Endpoint_Write_Control_Stream_LE+0xe2>
    113e:	85 30       	cpi	r24, 0x05	; 5
    1140:	09 f4       	brne	.+2      	; 0x1144 <Endpoint_Write_Control_Stream_LE+0x64>
    1142:	41 c0       	rjmp	.+130    	; 0x11c6 <Endpoint_Write_Control_Stream_LE+0xe6>
    1144:	80 81       	ld	r24, Z
    1146:	83 fd       	sbrc	r24, 3
    1148:	40 c0       	rjmp	.+128    	; 0x11ca <Endpoint_Write_Control_Stream_LE+0xea>
    114a:	80 81       	ld	r24, Z
    114c:	82 fd       	sbrc	r24, 2
    114e:	32 c0       	rjmp	.+100    	; 0x11b4 <Endpoint_Write_Control_Stream_LE+0xd4>
    1150:	80 81       	ld	r24, Z
    1152:	80 ff       	sbrs	r24, 0
    1154:	1f c0       	rjmp	.+62     	; 0x1194 <Endpoint_Write_Control_Stream_LE+0xb4>
    1156:	eb 01       	movw	r28, r22
    1158:	18 81       	ld	r17, Y
    115a:	ea 01       	movw	r28, r20
    115c:	88 81       	ld	r24, Y
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	91 2b       	or	r25, r17
    1162:	21 15       	cp	r18, r1
    1164:	31 05       	cpc	r19, r1
    1166:	79 f0       	breq	.+30     	; 0x1186 <Endpoint_Write_Control_Stream_LE+0xa6>
    1168:	88 30       	cpi	r24, 0x08	; 8
    116a:	91 05       	cpc	r25, r1
    116c:	60 f4       	brcc	.+24     	; 0x1186 <Endpoint_Write_Control_Stream_LE+0xa6>
    116e:	1d 91       	ld	r17, X+
    1170:	e6 01       	movw	r28, r12
    1172:	18 83       	st	Y, r17
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	31 09       	sbc	r19, r1
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	21 15       	cp	r18, r1
    117c:	31 05       	cpc	r19, r1
    117e:	19 f0       	breq	.+6      	; 0x1186 <Endpoint_Write_Control_Stream_LE+0xa6>
    1180:	88 30       	cpi	r24, 0x08	; 8
    1182:	91 05       	cpc	r25, r1
    1184:	a1 f7       	brne	.-24     	; 0x116e <Endpoint_Write_Control_Stream_LE+0x8e>
    1186:	10 2f       	mov	r17, r16
    1188:	08 97       	sbiw	r24, 0x08	; 8
    118a:	09 f0       	breq	.+2      	; 0x118e <Endpoint_Write_Control_Stream_LE+0xae>
    118c:	1f 2d       	mov	r17, r15
    118e:	80 81       	ld	r24, Z
    1190:	8e 77       	andi	r24, 0x7E	; 126
    1192:	80 83       	st	Z, r24
    1194:	21 15       	cp	r18, r1
    1196:	31 05       	cpc	r19, r1
    1198:	69 f6       	brne	.-102    	; 0x1134 <Endpoint_Write_Control_Stream_LE+0x54>
    119a:	11 11       	cpse	r17, r1
    119c:	cb cf       	rjmp	.-106    	; 0x1134 <Endpoint_Write_Control_Stream_LE+0x54>
    119e:	0a c0       	rjmp	.+20     	; 0x11b4 <Endpoint_Write_Control_Stream_LE+0xd4>
    11a0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
    11a4:	88 23       	and	r24, r24
    11a6:	99 f0       	breq	.+38     	; 0x11ce <Endpoint_Write_Control_Stream_LE+0xee>
    11a8:	85 30       	cpi	r24, 0x05	; 5
    11aa:	99 f0       	breq	.+38     	; 0x11d2 <Endpoint_Write_Control_Stream_LE+0xf2>
    11ac:	80 81       	ld	r24, Z
    11ae:	83 ff       	sbrs	r24, 3
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <Endpoint_Write_Control_Stream_LE+0xd8>
    11b2:	11 c0       	rjmp	.+34     	; 0x11d6 <Endpoint_Write_Control_Stream_LE+0xf6>
    11b4:	e8 ee       	ldi	r30, 0xE8	; 232
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	82 ff       	sbrs	r24, 2
    11bc:	f1 cf       	rjmp	.-30     	; 0x11a0 <Endpoint_Write_Control_Stream_LE+0xc0>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	0b c0       	rjmp	.+22     	; 0x11d8 <Endpoint_Write_Control_Stream_LE+0xf8>
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	09 c0       	rjmp	.+18     	; 0x11d8 <Endpoint_Write_Control_Stream_LE+0xf8>
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	07 c0       	rjmp	.+14     	; 0x11d8 <Endpoint_Write_Control_Stream_LE+0xf8>
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	05 c0       	rjmp	.+10     	; 0x11d8 <Endpoint_Write_Control_Stream_LE+0xf8>
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	03 c0       	rjmp	.+6      	; 0x11d8 <Endpoint_Write_Control_Stream_LE+0xf8>
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <Endpoint_Write_Control_Stream_LE+0xf8>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	df 90       	pop	r13
    11e4:	cf 90       	pop	r12
    11e6:	08 95       	ret

000011e8 <Endpoint_Read_Control_Stream_LE>:
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	61 15       	cp	r22, r1
    11f4:	71 05       	cpc	r23, r1
    11f6:	51 f5       	brne	.+84     	; 0x124c <Endpoint_Read_Control_Stream_LE+0x64>
    11f8:	e8 ee       	ldi	r30, 0xE8	; 232
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8b 77       	andi	r24, 0x7B	; 123
    1200:	80 83       	st	Z, r24
    1202:	45 c0       	rjmp	.+138    	; 0x128e <Endpoint_Read_Control_Stream_LE+0xa6>
    1204:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
    1208:	88 23       	and	r24, r24
    120a:	09 f4       	brne	.+2      	; 0x120e <Endpoint_Read_Control_Stream_LE+0x26>
    120c:	47 c0       	rjmp	.+142    	; 0x129c <Endpoint_Read_Control_Stream_LE+0xb4>
    120e:	85 30       	cpi	r24, 0x05	; 5
    1210:	09 f4       	brne	.+2      	; 0x1214 <Endpoint_Read_Control_Stream_LE+0x2c>
    1212:	46 c0       	rjmp	.+140    	; 0x12a0 <Endpoint_Read_Control_Stream_LE+0xb8>
    1214:	80 81       	ld	r24, Z
    1216:	83 fd       	sbrc	r24, 3
    1218:	45 c0       	rjmp	.+138    	; 0x12a4 <Endpoint_Read_Control_Stream_LE+0xbc>
    121a:	80 81       	ld	r24, Z
    121c:	82 ff       	sbrs	r24, 2
    121e:	f2 cf       	rjmp	.-28     	; 0x1204 <Endpoint_Read_Control_Stream_LE+0x1c>
    1220:	4d c0       	rjmp	.+154    	; 0x12bc <Endpoint_Read_Control_Stream_LE+0xd4>
    1222:	ea 01       	movw	r28, r20
    1224:	88 81       	ld	r24, Y
    1226:	8d 93       	st	X+, r24
    1228:	61 50       	subi	r22, 0x01	; 1
    122a:	71 09       	sbc	r23, r1
    122c:	41 f0       	breq	.+16     	; 0x123e <Endpoint_Read_Control_Stream_LE+0x56>
    122e:	e9 01       	movw	r28, r18
    1230:	18 81       	ld	r17, Y
    1232:	e7 01       	movw	r28, r14
    1234:	88 81       	ld	r24, Y
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	91 2b       	or	r25, r17
    123a:	89 2b       	or	r24, r25
    123c:	91 f7       	brne	.-28     	; 0x1222 <Endpoint_Read_Control_Stream_LE+0x3a>
    123e:	80 81       	ld	r24, Z
    1240:	8b 77       	andi	r24, 0x7B	; 123
    1242:	80 83       	st	Z, r24
    1244:	61 15       	cp	r22, r1
    1246:	71 05       	cpc	r23, r1
    1248:	71 f4       	brne	.+28     	; 0x1266 <Endpoint_Read_Control_Stream_LE+0x7e>
    124a:	21 c0       	rjmp	.+66     	; 0x128e <Endpoint_Read_Control_Stream_LE+0xa6>
    124c:	a8 2f       	mov	r26, r24
    124e:	b9 2f       	mov	r27, r25
    1250:	e8 ee       	ldi	r30, 0xE8	; 232
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	23 ef       	ldi	r18, 0xF3	; 243
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	0f 2e       	mov	r0, r31
    125a:	f2 ef       	ldi	r31, 0xF2	; 242
    125c:	ef 2e       	mov	r14, r31
    125e:	f1 2c       	mov	r15, r1
    1260:	f0 2d       	mov	r31, r0
    1262:	41 ef       	ldi	r20, 0xF1	; 241
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
    126a:	88 23       	and	r24, r24
    126c:	e9 f0       	breq	.+58     	; 0x12a8 <Endpoint_Read_Control_Stream_LE+0xc0>
    126e:	85 30       	cpi	r24, 0x05	; 5
    1270:	e9 f0       	breq	.+58     	; 0x12ac <Endpoint_Read_Control_Stream_LE+0xc4>
    1272:	80 81       	ld	r24, Z
    1274:	83 fd       	sbrc	r24, 3
    1276:	1c c0       	rjmp	.+56     	; 0x12b0 <Endpoint_Read_Control_Stream_LE+0xc8>
    1278:	80 81       	ld	r24, Z
    127a:	82 fd       	sbrc	r24, 2
    127c:	1f c0       	rjmp	.+62     	; 0x12bc <Endpoint_Read_Control_Stream_LE+0xd4>
    127e:	c2 cf       	rjmp	.-124    	; 0x1204 <Endpoint_Read_Control_Stream_LE+0x1c>
    1280:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
    1284:	88 23       	and	r24, r24
    1286:	b1 f0       	breq	.+44     	; 0x12b4 <Endpoint_Read_Control_Stream_LE+0xcc>
    1288:	85 30       	cpi	r24, 0x05	; 5
    128a:	19 f4       	brne	.+6      	; 0x1292 <Endpoint_Read_Control_Stream_LE+0xaa>
    128c:	15 c0       	rjmp	.+42     	; 0x12b8 <Endpoint_Read_Control_Stream_LE+0xd0>
    128e:	e8 ee       	ldi	r30, 0xE8	; 232
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 ff       	sbrs	r24, 0
    1296:	f4 cf       	rjmp	.-24     	; 0x1280 <Endpoint_Read_Control_Stream_LE+0x98>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	1a c0       	rjmp	.+52     	; 0x12d0 <Endpoint_Read_Control_Stream_LE+0xe8>
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	18 c0       	rjmp	.+48     	; 0x12d0 <Endpoint_Read_Control_Stream_LE+0xe8>
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	16 c0       	rjmp	.+44     	; 0x12d0 <Endpoint_Read_Control_Stream_LE+0xe8>
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <Endpoint_Read_Control_Stream_LE+0xe8>
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	12 c0       	rjmp	.+36     	; 0x12d0 <Endpoint_Read_Control_Stream_LE+0xe8>
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	10 c0       	rjmp	.+32     	; 0x12d0 <Endpoint_Read_Control_Stream_LE+0xe8>
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	0e c0       	rjmp	.+28     	; 0x12d0 <Endpoint_Read_Control_Stream_LE+0xe8>
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	0c c0       	rjmp	.+24     	; 0x12d0 <Endpoint_Read_Control_Stream_LE+0xe8>
    12b8:	83 e0       	ldi	r24, 0x03	; 3
    12ba:	0a c0       	rjmp	.+20     	; 0x12d0 <Endpoint_Read_Control_Stream_LE+0xe8>
    12bc:	e9 01       	movw	r28, r18
    12be:	18 81       	ld	r17, Y
    12c0:	e7 01       	movw	r28, r14
    12c2:	88 81       	ld	r24, Y
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	91 2b       	or	r25, r17
    12c8:	89 2b       	or	r24, r25
    12ca:	09 f0       	breq	.+2      	; 0x12ce <Endpoint_Read_Control_Stream_LE+0xe6>
    12cc:	aa cf       	rjmp	.-172    	; 0x1222 <Endpoint_Read_Control_Stream_LE+0x3a>
    12ce:	b7 cf       	rjmp	.-146    	; 0x123e <Endpoint_Read_Control_Stream_LE+0x56>
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	08 95       	ret

000012dc <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    12ea:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <USB_ControlRequest+0x6>
    12ee:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <USB_ControlRequest+0x7>
    12f2:	26 17       	cp	r18, r22
    12f4:	37 07       	cpc	r19, r23
    12f6:	58 f0       	brcs	.+22     	; 0x130e <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    12f8:	61 15       	cp	r22, r1
    12fa:	71 05       	cpc	r23, r1
    12fc:	39 f4       	brne	.+14     	; 0x130c <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12fe:	e8 ee       	ldi	r30, 0xE8	; 232
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	20 81       	ld	r18, Z
    1304:	2e 77       	andi	r18, 0x7E	; 126
    1306:	20 83       	st	Z, r18
    1308:	9b 01       	movw	r18, r22
    130a:	01 c0       	rjmp	.+2      	; 0x130e <Endpoint_Write_Control_PStream_LE+0x32>
    130c:	9b 01       	movw	r18, r22
    130e:	e8 2f       	mov	r30, r24
    1310:	f9 2f       	mov	r31, r25
    1312:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1314:	a8 ee       	ldi	r26, 0xE8	; 232
    1316:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1318:	63 ef       	ldi	r22, 0xF3	; 243
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	42 ef       	ldi	r20, 0xF2	; 242
    131e:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1320:	0f 2e       	mov	r0, r31
    1322:	f1 ef       	ldi	r31, 0xF1	; 241
    1324:	cf 2e       	mov	r12, r31
    1326:	d1 2c       	mov	r13, r1
    1328:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    132a:	01 e0       	ldi	r16, 0x01	; 1
    132c:	f1 2c       	mov	r15, r1
    132e:	31 c0       	rjmp	.+98     	; 0x1392 <Endpoint_Write_Control_PStream_LE+0xb6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1330:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1334:	88 23       	and	r24, r24
    1336:	09 f4       	brne	.+2      	; 0x133a <Endpoint_Write_Control_PStream_LE+0x5e>
    1338:	43 c0       	rjmp	.+134    	; 0x13c0 <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    133a:	85 30       	cpi	r24, 0x05	; 5
    133c:	09 f4       	brne	.+2      	; 0x1340 <Endpoint_Write_Control_PStream_LE+0x64>
    133e:	42 c0       	rjmp	.+132    	; 0x13c4 <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1340:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1342:	83 fd       	sbrc	r24, 3
    1344:	41 c0       	rjmp	.+130    	; 0x13c8 <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1346:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1348:	82 fd       	sbrc	r24, 2
    134a:	33 c0       	rjmp	.+102    	; 0x13b2 <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    134c:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    134e:	80 ff       	sbrs	r24, 0
    1350:	20 c0       	rjmp	.+64     	; 0x1392 <Endpoint_Write_Control_PStream_LE+0xb6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1352:	eb 01       	movw	r28, r22
    1354:	18 81       	ld	r17, Y
    1356:	ea 01       	movw	r28, r20
    1358:	88 81       	ld	r24, Y
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    135e:	21 15       	cp	r18, r1
    1360:	31 05       	cpc	r19, r1
    1362:	81 f0       	breq	.+32     	; 0x1384 <Endpoint_Write_Control_PStream_LE+0xa8>
    1364:	88 30       	cpi	r24, 0x08	; 8
    1366:	91 05       	cpc	r25, r1
    1368:	68 f4       	brcc	.+26     	; 0x1384 <Endpoint_Write_Control_PStream_LE+0xa8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    136a:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    136c:	e6 01       	movw	r28, r12
    136e:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1370:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1372:	21 50       	subi	r18, 0x01	; 1
    1374:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    1376:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1378:	21 15       	cp	r18, r1
    137a:	31 05       	cpc	r19, r1
    137c:	19 f0       	breq	.+6      	; 0x1384 <Endpoint_Write_Control_PStream_LE+0xa8>
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	91 05       	cpc	r25, r1
    1382:	99 f7       	brne	.-26     	; 0x136a <Endpoint_Write_Control_PStream_LE+0x8e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1384:	10 2f       	mov	r17, r16
    1386:	08 97       	sbiw	r24, 0x08	; 8
    1388:	09 f0       	breq	.+2      	; 0x138c <Endpoint_Write_Control_PStream_LE+0xb0>
    138a:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    138c:	8c 91       	ld	r24, X
    138e:	8e 77       	andi	r24, 0x7E	; 126
    1390:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1392:	21 15       	cp	r18, r1
    1394:	31 05       	cpc	r19, r1
    1396:	61 f6       	brne	.-104    	; 0x1330 <Endpoint_Write_Control_PStream_LE+0x54>
    1398:	11 11       	cpse	r17, r1
    139a:	ca cf       	rjmp	.-108    	; 0x1330 <Endpoint_Write_Control_PStream_LE+0x54>
    139c:	0a c0       	rjmp	.+20     	; 0x13b2 <Endpoint_Write_Control_PStream_LE+0xd6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    139e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    13a2:	88 23       	and	r24, r24
    13a4:	99 f0       	breq	.+38     	; 0x13cc <Endpoint_Write_Control_PStream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    13a6:	85 30       	cpi	r24, 0x05	; 5
    13a8:	99 f0       	breq	.+38     	; 0x13d0 <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13aa:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    13ac:	83 ff       	sbrs	r24, 3
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <Endpoint_Write_Control_PStream_LE+0xda>
    13b0:	11 c0       	rjmp	.+34     	; 0x13d4 <Endpoint_Write_Control_PStream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13b2:	e8 ee       	ldi	r30, 0xE8	; 232
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    13b8:	82 ff       	sbrs	r24, 2
    13ba:	f1 cf       	rjmp	.-30     	; 0x139e <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	0b c0       	rjmp	.+22     	; 0x13d6 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    13cc:	82 e0       	ldi	r24, 0x02	; 2
    13ce:	03 c0       	rjmp	.+6      	; 0x13d6 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	08 95       	ret

000013e6 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    13e6:	8f 92       	push	r8
    13e8:	9f 92       	push	r9
    13ea:	bf 92       	push	r11
    13ec:	cf 92       	push	r12
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	87 30       	cpi	r24, 0x07	; 7
    13fe:	70 f1       	brcs	.+92     	; 0x145c <Endpoint_ConfigureEndpoint_Prv+0x76>
    1400:	26 c0       	rjmp	.+76     	; 0x144e <Endpoint_ConfigureEndpoint_Prv+0x68>
    1402:	29 2f       	mov	r18, r25
    1404:	2f 70       	andi	r18, 0x0F	; 15
    1406:	e7 01       	movw	r28, r14
    1408:	28 83       	st	Y, r18
    140a:	89 17       	cp	r24, r25
    140c:	31 f0       	breq	.+12     	; 0x141a <Endpoint_ConfigureEndpoint_Prv+0x34>
    140e:	e8 01       	movw	r28, r16
    1410:	78 81       	ld	r23, Y
    1412:	20 81       	ld	r18, Z
    1414:	e4 01       	movw	r28, r8
    1416:	58 81       	ld	r21, Y
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    141a:	24 2f       	mov	r18, r20
    141c:	76 2f       	mov	r23, r22
    141e:	5b 2d       	mov	r21, r11
    1420:	21 ff       	sbrs	r18, 1
    1422:	12 c0       	rjmp	.+36     	; 0x1448 <Endpoint_ConfigureEndpoint_Prv+0x62>
    1424:	3c 91       	ld	r19, X
    1426:	3e 7f       	andi	r19, 0xFE	; 254
    1428:	3c 93       	st	X, r19
    142a:	30 81       	ld	r19, Z
    142c:	3d 7f       	andi	r19, 0xFD	; 253
    142e:	30 83       	st	Z, r19
    1430:	3c 91       	ld	r19, X
    1432:	31 60       	ori	r19, 0x01	; 1
    1434:	3c 93       	st	X, r19
    1436:	e8 01       	movw	r28, r16
    1438:	78 83       	st	Y, r23
    143a:	20 83       	st	Z, r18
    143c:	e4 01       	movw	r28, r8
    143e:	58 83       	st	Y, r21
    1440:	e6 01       	movw	r28, r12
    1442:	28 81       	ld	r18, Y
    1444:	22 23       	and	r18, r18
    1446:	44 f4       	brge	.+16     	; 0x1458 <Endpoint_ConfigureEndpoint_Prv+0x72>
    1448:	9f 5f       	subi	r25, 0xFF	; 255
    144a:	97 30       	cpi	r25, 0x07	; 7
    144c:	d1 f6       	brne	.-76     	; 0x1402 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    144e:	8f 70       	andi	r24, 0x0F	; 15
    1450:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	21 c0       	rjmp	.+66     	; 0x149a <Endpoint_ConfigureEndpoint_Prv+0xb4>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	1f c0       	rjmp	.+62     	; 0x149a <Endpoint_ConfigureEndpoint_Prv+0xb4>
    145c:	98 2f       	mov	r25, r24
    145e:	9f 70       	andi	r25, 0x0F	; 15
    1460:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1464:	98 2f       	mov	r25, r24
    1466:	24 2f       	mov	r18, r20
    1468:	76 2f       	mov	r23, r22
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	ab ee       	ldi	r26, 0xEB	; 235
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ed ee       	ldi	r30, 0xED	; 237
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	0c ee       	ldi	r16, 0xEC	; 236
    1476:	10 e0       	ldi	r17, 0x00	; 0
    1478:	0f 2e       	mov	r0, r31
    147a:	f0 ef       	ldi	r31, 0xF0	; 240
    147c:	8f 2e       	mov	r8, r31
    147e:	91 2c       	mov	r9, r1
    1480:	f0 2d       	mov	r31, r0
    1482:	0f 2e       	mov	r0, r31
    1484:	fe ee       	ldi	r31, 0xEE	; 238
    1486:	cf 2e       	mov	r12, r31
    1488:	d1 2c       	mov	r13, r1
    148a:	f0 2d       	mov	r31, r0
    148c:	0f 2e       	mov	r0, r31
    148e:	f9 ee       	ldi	r31, 0xE9	; 233
    1490:	ef 2e       	mov	r14, r31
    1492:	f1 2c       	mov	r15, r1
    1494:	f0 2d       	mov	r31, r0
    1496:	b1 2c       	mov	r11, r1
    1498:	c3 cf       	rjmp	.-122    	; 0x1420 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	cf 90       	pop	r12
    14aa:	bf 90       	pop	r11
    14ac:	9f 90       	pop	r9
    14ae:	8f 90       	pop	r8
    14b0:	08 95       	ret

000014b2 <Endpoint_ConfigureEndpointTable>:
    14b2:	ef 92       	push	r14
    14b4:	ff 92       	push	r15
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	66 23       	and	r22, r22
    14c0:	e9 f1       	breq	.+122    	; 0x153c <Endpoint_ConfigureEndpointTable+0x8a>
    14c2:	06 2f       	mov	r16, r22
    14c4:	c8 2f       	mov	r28, r24
    14c6:	d9 2f       	mov	r29, r25
    14c8:	10 e0       	ldi	r17, 0x00	; 0
    14ca:	0f 2e       	mov	r0, r31
    14cc:	f6 e0       	ldi	r31, 0x06	; 6
    14ce:	ff 2e       	mov	r15, r31
    14d0:	f0 2d       	mov	r31, r0
    14d2:	68 94       	set
    14d4:	ee 24       	eor	r14, r14
    14d6:	e1 f8       	bld	r14, 1
    14d8:	58 81       	ld	r21, Y
    14da:	55 23       	and	r21, r21
    14dc:	49 f1       	breq	.+82     	; 0x1530 <Endpoint_ConfigureEndpointTable+0x7e>
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	e9 81       	ldd	r30, Y+1	; 0x01
    14e2:	fa 81       	ldd	r31, Y+2	; 0x02
    14e4:	6b 81       	ldd	r22, Y+3	; 0x03
    14e6:	85 2f       	mov	r24, r21
    14e8:	8f 70       	andi	r24, 0x0F	; 15
    14ea:	87 30       	cpi	r24, 0x07	; 7
    14ec:	48 f5       	brcc	.+82     	; 0x1540 <Endpoint_ConfigureEndpointTable+0x8e>
    14ee:	92 30       	cpi	r25, 0x02	; 2
    14f0:	10 f4       	brcc	.+4      	; 0x14f6 <Endpoint_ConfigureEndpointTable+0x44>
    14f2:	4e 2d       	mov	r20, r14
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <Endpoint_ConfigureEndpointTable+0x46>
    14f6:	4f 2d       	mov	r20, r15
    14f8:	e9 30       	cpi	r30, 0x09	; 9
    14fa:	f1 05       	cpc	r31, r1
    14fc:	50 f0       	brcs	.+20     	; 0x1512 <Endpoint_ConfigureEndpointTable+0x60>
    14fe:	28 e0       	ldi	r18, 0x08	; 8
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9f 5f       	subi	r25, 0xFF	; 255
    1506:	22 0f       	add	r18, r18
    1508:	33 1f       	adc	r19, r19
    150a:	2e 17       	cp	r18, r30
    150c:	3f 07       	cpc	r19, r31
    150e:	d0 f3       	brcs	.-12     	; 0x1504 <Endpoint_ConfigureEndpointTable+0x52>
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <Endpoint_ConfigureEndpointTable+0x62>
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	92 95       	swap	r25
    1516:	90 7f       	andi	r25, 0xF0	; 240
    1518:	49 2b       	or	r20, r25
    151a:	90 e4       	ldi	r25, 0x40	; 64
    151c:	69 9f       	mul	r22, r25
    151e:	b0 01       	movw	r22, r0
    1520:	11 24       	eor	r1, r1
    1522:	55 1f       	adc	r21, r21
    1524:	55 27       	eor	r21, r21
    1526:	55 1f       	adc	r21, r21
    1528:	65 2b       	or	r22, r21
    152a:	5d df       	rcall	.-326    	; 0x13e6 <Endpoint_ConfigureEndpoint_Prv>
    152c:	88 23       	and	r24, r24
    152e:	49 f0       	breq	.+18     	; 0x1542 <Endpoint_ConfigureEndpointTable+0x90>
    1530:	1f 5f       	subi	r17, 0xFF	; 255
    1532:	25 96       	adiw	r28, 0x05	; 5
    1534:	01 13       	cpse	r16, r17
    1536:	d0 cf       	rjmp	.-96     	; 0x14d8 <Endpoint_ConfigureEndpointTable+0x26>
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <Endpoint_ConfigureEndpointTable+0x90>
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <Endpoint_ConfigureEndpointTable+0x90>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	08 95       	ret

00001550 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1550:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest>
    1554:	88 23       	and	r24, r24
    1556:	44 f0       	brlt	.+16     	; 0x1568 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1558:	e8 ee       	ldi	r30, 0xE8	; 232
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    155e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
    1562:	81 11       	cpse	r24, r1
    1564:	03 c0       	rjmp	.+6      	; 0x156c <Endpoint_ClearStatusStage+0x1c>
    1566:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1568:	e8 ee       	ldi	r30, 0xE8	; 232
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    156e:	82 ff       	sbrs	r24, 2
    1570:	f6 cf       	rjmp	.-20     	; 0x155e <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1572:	e8 ee       	ldi	r30, 0xE8	; 232
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8b 77       	andi	r24, 0x7B	; 123
    157a:	80 83       	st	Z, r24
    157c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    157e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
    1582:	88 23       	and	r24, r24
    1584:	41 f0       	breq	.+16     	; 0x1596 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1586:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1588:	80 ff       	sbrs	r24, 0
    158a:	f9 cf       	rjmp	.-14     	; 0x157e <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    158c:	e8 ee       	ldi	r30, 0xE8	; 232
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8e 77       	andi	r24, 0x7E	; 126
    1594:	80 83       	st	Z, r24
    1596:	08 95       	ret

00001598 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    15a0:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    15a4:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    15a8:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    15aa:	ac ee       	ldi	r26, 0xEC	; 236
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15ae:	e8 ee       	ldi	r30, 0xE8	; 232
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    15b2:	0b ee       	ldi	r16, 0xEB	; 235
    15b4:	10 e0       	ldi	r17, 0x00	; 0
    15b6:	44 ee       	ldi	r20, 0xE4	; 228
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <Endpoint_WaitUntilReady+0x26>
    15bc:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    15be:	9c 91       	ld	r25, X
    15c0:	89 2f       	mov	r24, r25
    15c2:	81 70       	andi	r24, 0x01	; 1
    15c4:	90 fd       	sbrc	r25, 0
    15c6:	1d c0       	rjmp	.+58     	; 0x1602 <Endpoint_WaitUntilReady+0x6a>
    15c8:	20 c0       	rjmp	.+64     	; 0x160a <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15ca:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15ce:	88 23       	and	r24, r24
    15d0:	81 f0       	breq	.+32     	; 0x15f2 <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15d2:	85 30       	cpi	r24, 0x05	; 5
    15d4:	81 f0       	breq	.+32     	; 0x15f6 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    15d6:	e8 01       	movw	r28, r16
    15d8:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    15da:	85 fd       	sbrc	r24, 5
    15dc:	0e c0       	rjmp	.+28     	; 0x15fa <Endpoint_WaitUntilReady+0x62>
    15de:	ea 01       	movw	r28, r20
    15e0:	88 81       	ld	r24, Y
    15e2:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    15e4:	28 17       	cp	r18, r24
    15e6:	39 07       	cpc	r19, r25
    15e8:	51 f3       	breq	.-44     	; 0x15be <Endpoint_WaitUntilReady+0x26>
    15ea:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    15ec:	39 f7       	brne	.-50     	; 0x15bc <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    15ee:	84 e0       	ldi	r24, 0x04	; 4
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	0d c0       	rjmp	.+26     	; 0x1610 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	0b c0       	rjmp	.+22     	; 0x1610 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1602:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1604:	80 ff       	sbrs	r24, 0
    1606:	e1 cf       	rjmp	.-62     	; 0x15ca <Endpoint_WaitUntilReady+0x32>
    1608:	fa cf       	rjmp	.-12     	; 0x15fe <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    160a:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    160c:	92 ff       	sbrs	r25, 2
    160e:	dd cf       	rjmp	.-70     	; 0x15ca <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	08 95       	ret

0000161a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1622:	4c d0       	rcall	.+152    	; 0x16bc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1624:	53 d0       	rcall	.+166    	; 0x16cc <USB_INT_ClearAllInterrupts>
    1626:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1628:	d0 e0       	ldi	r29, 0x00	; 0
    162a:	88 81       	ld	r24, Y
    162c:	8f 77       	andi	r24, 0x7F	; 127
    162e:	88 83       	st	Y, r24
    1630:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    1632:	80 68       	ori	r24, 0x80	; 128
    1634:	88 83       	st	Y, r24
    1636:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1638:	8f 7d       	andi	r24, 0xDF	; 223
    163a:	88 83       	st	Y, r24
    163c:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    163e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1642:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    1646:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    164a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    164e:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1650:	10 e0       	ldi	r17, 0x00	; 0
    1652:	f8 01       	movw	r30, r16
    1654:	80 81       	ld	r24, Z
    1656:	8b 7f       	andi	r24, 0xFB	; 251
    1658:	80 83       	st	Z, r24
    165a:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    165c:	81 60       	ori	r24, 0x01	; 1
    165e:	88 83       	st	Y, r24
    1660:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	bf de       	rcall	.-642    	; 0x13e6 <Endpoint_ConfigureEndpoint_Prv>
    1668:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8e 7f       	andi	r24, 0xFE	; 254
    1670:	80 83       	st	Z, r24
    1672:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	81 60       	ori	r24, 0x01	; 1
    167a:	80 83       	st	Z, r24
    167c:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    167e:	88 60       	ori	r24, 0x08	; 8
    1680:	80 83       	st	Z, r24
    1682:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1684:	80 81       	ld	r24, Z
    1686:	8e 7f       	andi	r24, 0xFE	; 254
    1688:	80 83       	st	Z, r24
    168a:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    168c:	80 61       	ori	r24, 0x10	; 16
    168e:	88 83       	st	Y, r24
    1690:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <USB_Init>:
    169a:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8f 7e       	andi	r24, 0xEF	; 239
    16a2:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    16a4:	e7 ed       	ldi	r30, 0xD7	; 215
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	81 60       	ori	r24, 0x01	; 1
    16ac:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    16ae:	84 e0       	ldi	r24, 0x04	; 4
    16b0:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <USB_IsInitialized>

	USB_ResetInterface();
    16b8:	b0 cf       	rjmp	.-160    	; 0x161a <USB_ResetInterface>
    16ba:	08 95       	ret

000016bc <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    16bc:	e8 ed       	ldi	r30, 0xD8	; 216
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8e 7f       	andi	r24, 0xFE	; 254
    16c4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    16c6:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    16ca:	08 95       	ret

000016cc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    16cc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    16d0:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    16d4:	08 95       	ret

000016d6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	2f 93       	push	r18
    16e2:	3f 93       	push	r19
    16e4:	4f 93       	push	r20
    16e6:	5f 93       	push	r21
    16e8:	6f 93       	push	r22
    16ea:	7f 93       	push	r23
    16ec:	8f 93       	push	r24
    16ee:	9f 93       	push	r25
    16f0:	af 93       	push	r26
    16f2:	bf 93       	push	r27
    16f4:	ef 93       	push	r30
    16f6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    16f8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    16fc:	82 ff       	sbrs	r24, 2
    16fe:	0b c0       	rjmp	.+22     	; 0x1716 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1700:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1704:	82 ff       	sbrs	r24, 2
    1706:	07 c0       	rjmp	.+14     	; 0x1716 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1708:	e1 ee       	ldi	r30, 0xE1	; 225
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8b 7f       	andi	r24, 0xFB	; 251
    1710:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1712:	0e 94 98 02 	call	0x530	; 0x530 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1716:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    171a:	80 ff       	sbrs	r24, 0
    171c:	1f c0       	rjmp	.+62     	; 0x175c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    171e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1722:	80 ff       	sbrs	r24, 0
    1724:	1b c0       	rjmp	.+54     	; 0x175c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1726:	ea ed       	ldi	r30, 0xDA	; 218
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	8e 7f       	andi	r24, 0xFE	; 254
    172e:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1730:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1734:	80 ff       	sbrs	r24, 0
    1736:	0d c0       	rjmp	.+26     	; 0x1752 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1738:	80 e1       	ldi	r24, 0x10	; 16
    173a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    173c:	82 e1       	ldi	r24, 0x12	; 18
    173e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1740:	09 b4       	in	r0, 0x29	; 41
    1742:	00 fe       	sbrs	r0, 0
    1744:	fd cf       	rjmp	.-6      	; 0x1740 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
			EVENT_USB_Device_Connect();
    174c:	0e 94 89 02 	call	0x512	; 0x512 <EVENT_USB_Device_Connect>
    1750:	05 c0       	rjmp	.+10     	; 0x175c <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1752:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1754:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1758:	0e 94 8a 02 	call	0x514	; 0x514 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    175c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1760:	80 ff       	sbrs	r24, 0
    1762:	16 c0       	rjmp	.+44     	; 0x1790 <__vector_10+0xba>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1764:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1768:	80 ff       	sbrs	r24, 0
    176a:	12 c0       	rjmp	.+36     	; 0x1790 <__vector_10+0xba>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    176c:	e2 ee       	ldi	r30, 0xE2	; 226
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8e 7f       	andi	r24, 0xFE	; 254
    1774:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1776:	80 81       	ld	r24, Z
    1778:	80 61       	ori	r24, 0x10	; 16
    177a:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    177c:	e8 ed       	ldi	r30, 0xD8	; 216
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	80 62       	ori	r24, 0x20	; 32
    1784:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1786:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1788:	85 e0       	ldi	r24, 0x05	; 5
    178a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    178e:	e1 d1       	rcall	.+962    	; 0x1b52 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1790:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1794:	84 ff       	sbrs	r24, 4
    1796:	2f c0       	rjmp	.+94     	; 0x17f6 <__vector_10+0x120>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1798:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    179c:	84 ff       	sbrs	r24, 4
    179e:	2b c0       	rjmp	.+86     	; 0x17f6 <__vector_10+0x120>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    17a0:	80 e1       	ldi	r24, 0x10	; 16
    17a2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    17a4:	82 e1       	ldi	r24, 0x12	; 18
    17a6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    17a8:	09 b4       	in	r0, 0x29	; 41
    17aa:	00 fe       	sbrs	r0, 0
    17ac:	fd cf       	rjmp	.-6      	; 0x17a8 <__vector_10+0xd2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    17ae:	e8 ed       	ldi	r30, 0xD8	; 216
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	8f 7d       	andi	r24, 0xDF	; 223
    17b6:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    17b8:	e1 ee       	ldi	r30, 0xE1	; 225
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8f 7e       	andi	r24, 0xEF	; 239
    17c0:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    17c2:	e2 ee       	ldi	r30, 0xE2	; 226
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 7e       	andi	r24, 0xEF	; 239
    17ca:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    17cc:	80 81       	ld	r24, Z
    17ce:	81 60       	ori	r24, 0x01	; 1
    17d0:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    17d2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_Device_ConfigurationNumber>
    17d6:	88 23       	and	r24, r24
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <__vector_10+0x10c>
		  USB_DeviceState = DEVICE_STATE_Configured;
    17da:	84 e0       	ldi	r24, 0x04	; 4
    17dc:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
    17e0:	09 c0       	rjmp	.+18     	; 0x17f4 <__vector_10+0x11e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    17e2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    17e6:	88 23       	and	r24, r24
    17e8:	14 f0       	brlt	.+4      	; 0x17ee <__vector_10+0x118>
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <__vector_10+0x11a>
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    17f4:	ae d1       	rcall	.+860    	; 0x1b52 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    17f6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    17fa:	83 ff       	sbrs	r24, 3
    17fc:	1e c0       	rjmp	.+60     	; 0x183a <__vector_10+0x164>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    17fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1802:	83 ff       	sbrs	r24, 3
    1804:	1a c0       	rjmp	.+52     	; 0x183a <__vector_10+0x164>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1806:	e1 ee       	ldi	r30, 0xE1	; 225
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	87 7f       	andi	r24, 0xF7	; 247
    180e:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1816:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    181a:	80 81       	ld	r24, Z
    181c:	8e 7f       	andi	r24, 0xFE	; 254
    181e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1820:	e2 ee       	ldi	r30, 0xE2	; 226
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	8e 7f       	andi	r24, 0xFE	; 254
    1828:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    182a:	80 81       	ld	r24, Z
    182c:	80 61       	ori	r24, 0x10	; 16
    182e:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1830:	42 e0       	ldi	r20, 0x02	; 2
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1836:	d7 dd       	rcall	.-1106   	; 0x13e6 <Endpoint_ConfigureEndpoint_Prv>
    1838:	8c d1       	rcall	.+792    	; 0x1b52 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    183a:	ff 91       	pop	r31
    183c:	ef 91       	pop	r30
    183e:	bf 91       	pop	r27
    1840:	af 91       	pop	r26
    1842:	9f 91       	pop	r25
    1844:	8f 91       	pop	r24
    1846:	7f 91       	pop	r23
    1848:	6f 91       	pop	r22
    184a:	5f 91       	pop	r21
    184c:	4f 91       	pop	r20
    184e:	3f 91       	pop	r19
    1850:	2f 91       	pop	r18
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	aa 97       	sbiw	r28, 0x2a	; 42
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	ee e3       	ldi	r30, 0x3E	; 62
    1876:	f1 e0       	ldi	r31, 0x01	; 1
    1878:	26 e4       	ldi	r18, 0x46	; 70
    187a:	31 e0       	ldi	r19, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    187c:	a1 ef       	ldi	r26, 0xF1	; 241
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1882:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1884:	2e 17       	cp	r18, r30
    1886:	3f 07       	cpc	r19, r31
    1888:	d9 f7       	brne	.-10     	; 0x1880 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    188a:	0e 94 94 02 	call	0x528	; 0x528 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    188e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	if (Endpoint_IsSETUPReceived())
    1892:	83 ff       	sbrs	r24, 3
    1894:	39 c1       	rjmp	.+626    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1896:	ee e3       	ldi	r30, 0x3E	; 62
    1898:	f1 e0       	ldi	r31, 0x01	; 1
    189a:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    189c:	81 81       	ldd	r24, Z+1	; 0x01
    189e:	85 30       	cpi	r24, 0x05	; 5
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <USB_Device_ProcessControlRequest+0x48>
    18a2:	7f c0       	rjmp	.+254    	; 0x19a2 <USB_Device_ProcessControlRequest+0x146>
    18a4:	30 f4       	brcc	.+12     	; 0x18b2 <USB_Device_ProcessControlRequest+0x56>
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	c9 f1       	breq	.+114    	; 0x191c <USB_Device_ProcessControlRequest+0xc0>
    18aa:	68 f0       	brcs	.+26     	; 0x18c6 <USB_Device_ProcessControlRequest+0x6a>
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	b1 f1       	breq	.+108    	; 0x191c <USB_Device_ProcessControlRequest+0xc0>
    18b0:	2b c1       	rjmp	.+598    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
    18b2:	88 30       	cpi	r24, 0x08	; 8
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <USB_Device_ProcessControlRequest+0x5c>
    18b6:	f2 c0       	rjmp	.+484    	; 0x1a9c <USB_Device_ProcessControlRequest+0x240>
    18b8:	89 30       	cpi	r24, 0x09	; 9
    18ba:	09 f4       	brne	.+2      	; 0x18be <USB_Device_ProcessControlRequest+0x62>
    18bc:	ff c0       	rjmp	.+510    	; 0x1abc <USB_Device_ProcessControlRequest+0x260>
    18be:	86 30       	cpi	r24, 0x06	; 6
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <USB_Device_ProcessControlRequest+0x68>
    18c2:	22 c1       	rjmp	.+580    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
    18c4:	91 c0       	rjmp	.+290    	; 0x19e8 <USB_Device_ProcessControlRequest+0x18c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    18c6:	90 38       	cpi	r25, 0x80	; 128
    18c8:	21 f0       	breq	.+8      	; 0x18d2 <USB_Device_ProcessControlRequest+0x76>
    18ca:	92 38       	cpi	r25, 0x82	; 130
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <USB_Device_ProcessControlRequest+0x74>
    18ce:	1c c1       	rjmp	.+568    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
    18d0:	08 c0       	rjmp	.+16     	; 0x18e2 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    18d2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    18d6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <USB_Device_RemoteWakeupEnabled>
    18da:	99 23       	and	r25, r25
    18dc:	89 f0       	breq	.+34     	; 0x1900 <USB_Device_ProcessControlRequest+0xa4>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    18de:	82 60       	ori	r24, 0x02	; 2
    18e0:	0f c0       	rjmp	.+30     	; 0x1900 <USB_Device_ProcessControlRequest+0xa4>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    18e2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <USB_ControlRequest+0x4>
    18e6:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    18e8:	87 30       	cpi	r24, 0x07	; 7
    18ea:	08 f0       	brcs	.+2      	; 0x18ee <USB_Device_ProcessControlRequest+0x92>
    18ec:	0d c1       	rjmp	.+538    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18ee:	e9 ee       	ldi	r30, 0xE9	; 233
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    18f4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    18f8:	85 fb       	bst	r24, 5
    18fa:	88 27       	eor	r24, r24
    18fc:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18fe:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1900:	e8 ee       	ldi	r30, 0xE8	; 232
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	90 81       	ld	r25, Z
    1906:	97 7f       	andi	r25, 0xF7	; 247
    1908:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    190a:	a1 ef       	ldi	r26, 0xF1	; 241
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    1910:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1912:	80 81       	ld	r24, Z
    1914:	8e 77       	andi	r24, 0x7E	; 126
    1916:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1918:	1b de       	rcall	.-970    	; 0x1550 <Endpoint_ClearStatusStage>
    191a:	f6 c0       	rjmp	.+492    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    191c:	99 23       	and	r25, r25
    191e:	09 f4       	brne	.+2      	; 0x1922 <USB_Device_ProcessControlRequest+0xc6>
    1920:	02 c1       	rjmp	.+516    	; 0x1b26 <USB_Device_ProcessControlRequest+0x2ca>
    1922:	92 30       	cpi	r25, 0x02	; 2
    1924:	09 f0       	breq	.+2      	; 0x1928 <USB_Device_ProcessControlRequest+0xcc>
    1926:	f0 c0       	rjmp	.+480    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
    1928:	03 c1       	rjmp	.+518    	; 0x1b30 <USB_Device_ProcessControlRequest+0x2d4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	83 30       	cpi	r24, 0x03	; 3
    192e:	09 f0       	breq	.+2      	; 0x1932 <USB_Device_ProcessControlRequest+0xd6>
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <USB_Device_RemoteWakeupEnabled>
    1936:	2c c0       	rjmp	.+88     	; 0x1990 <USB_Device_ProcessControlRequest+0x134>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1938:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <USB_ControlRequest+0x4>
    193c:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    193e:	9f ef       	ldi	r25, 0xFF	; 255
    1940:	98 0f       	add	r25, r24
    1942:	96 30       	cpi	r25, 0x06	; 6
    1944:	08 f0       	brcs	.+2      	; 0x1948 <USB_Device_ProcessControlRequest+0xec>
    1946:	e0 c0       	rjmp	.+448    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1948:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    194c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1950:	90 ff       	sbrs	r25, 0
    1952:	1e c0       	rjmp	.+60     	; 0x1990 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1954:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <USB_ControlRequest+0x1>
    1958:	93 30       	cpi	r25, 0x03	; 3
    195a:	31 f4       	brne	.+12     	; 0x1968 <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    195c:	eb ee       	ldi	r30, 0xEB	; 235
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	80 62       	ori	r24, 0x20	; 32
    1964:	80 83       	st	Z, r24
    1966:	14 c0       	rjmp	.+40     	; 0x1990 <USB_Device_ProcessControlRequest+0x134>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1968:	eb ee       	ldi	r30, 0xEB	; 235
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	90 81       	ld	r25, Z
    196e:	90 61       	ori	r25, 0x10	; 16
    1970:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1972:	21 e0       	ldi	r18, 0x01	; 1
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	a9 01       	movw	r20, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <USB_Device_ProcessControlRequest+0x122>
    197a:	44 0f       	add	r20, r20
    197c:	55 1f       	adc	r21, r21
    197e:	8a 95       	dec	r24
    1980:	e2 f7       	brpl	.-8      	; 0x197a <USB_Device_ProcessControlRequest+0x11e>
    1982:	aa ee       	ldi	r26, 0xEA	; 234
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	4c 93       	st	X, r20
				UERST = 0;
    1988:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    198a:	80 81       	ld	r24, Z
    198c:	88 60       	ori	r24, 0x08	; 8
    198e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1990:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1994:	e8 ee       	ldi	r30, 0xE8	; 232
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    199c:	80 83       	st	Z, r24
    199e:	d8 dd       	rcall	.-1104   	; 0x1550 <Endpoint_ClearStatusStage>
    19a0:	b3 c0       	rjmp	.+358    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    19a2:	91 11       	cpse	r25, r1
    19a4:	b1 c0       	rjmp	.+354    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    19a6:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
    19aa:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    19ac:	e3 ee       	ldi	r30, 0xE3	; 227
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	80 78       	andi	r24, 0x80	; 128
    19b4:	81 2b       	or	r24, r17
    19b6:	80 83       	st	Z, r24
    19b8:	e8 ee       	ldi	r30, 0xE8	; 232
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    19c0:	80 83       	st	Z, r24
    19c2:	c6 dd       	rcall	.-1140   	; 0x1550 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19c4:	e8 ee       	ldi	r30, 0xE8	; 232
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    19ca:	80 ff       	sbrs	r24, 0
    19cc:	fd cf       	rjmp	.-6      	; 0x19c8 <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    19ce:	e3 ee       	ldi	r30, 0xE3	; 227
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	80 68       	ori	r24, 0x80	; 128
    19d6:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    19d8:	11 11       	cpse	r17, r1
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <USB_Device_ProcessControlRequest+0x184>
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <USB_Device_ProcessControlRequest+0x186>
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
    19e6:	90 c0       	rjmp	.+288    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    19e8:	90 58       	subi	r25, 0x80	; 128
    19ea:	92 30       	cpi	r25, 0x02	; 2
    19ec:	08 f0       	brcs	.+2      	; 0x19f0 <USB_Device_ProcessControlRequest+0x194>
    19ee:	8c c0       	rjmp	.+280    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    19f0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
    19f4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <USB_ControlRequest+0x3>
    19f8:	8c 3d       	cpi	r24, 0xDC	; 220
    19fa:	53 e0       	ldi	r21, 0x03	; 3
    19fc:	95 07       	cpc	r25, r21
    19fe:	99 f5       	brne	.+102    	; 0x1a66 <USB_Device_ProcessControlRequest+0x20a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1a04:	8a e2       	ldi	r24, 0x2A	; 42
    1a06:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1a08:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1a0a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1a0c:	de 01       	movw	r26, r28
    1a0e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1a10:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1a12:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1a14:	41 e2       	ldi	r20, 0x21	; 33
    1a16:	e3 2f       	mov	r30, r19
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    1a1e:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    1a20:	20 ff       	sbrs	r18, 0
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <USB_Device_ProcessControlRequest+0x1ce>
					{
						SerialByte >>= 4;
    1a24:	82 95       	swap	r24
    1a26:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1a28:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1a2a:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1a2c:	8a 30       	cpi	r24, 0x0A	; 10
    1a2e:	18 f0       	brcs	.+6      	; 0x1a36 <USB_Device_ProcessControlRequest+0x1da>
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	c7 96       	adiw	r24, 0x37	; 55
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <USB_Device_ProcessControlRequest+0x1de>
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	c0 96       	adiw	r24, 0x30	; 48
    1a3a:	8d 93       	st	X+, r24
    1a3c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1a3e:	2f 5f       	subi	r18, 0xFF	; 255
    1a40:	24 31       	cpi	r18, 0x14	; 20
    1a42:	49 f7       	brne	.-46     	; 0x1a16 <USB_Device_ProcessControlRequest+0x1ba>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1a44:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a46:	08 ee       	ldi	r16, 0xE8	; 232
    1a48:	10 e0       	ldi	r17, 0x00	; 0
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	80 81       	ld	r24, Z
    1a4e:	87 7f       	andi	r24, 0xF7	; 247
    1a50:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1a52:	6a e2       	ldi	r22, 0x2A	; 42
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	ce 01       	movw	r24, r28
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	42 db       	rcall	.-2428   	; 0x10e0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	80 81       	ld	r24, Z
    1a60:	8b 77       	andi	r24, 0x7B	; 123
    1a62:	80 83       	st	Z, r24
    1a64:	51 c0       	rjmp	.+162    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1a66:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <USB_ControlRequest+0x4>
    1a6a:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <USB_ControlRequest+0x5>
    1a6e:	ae 01       	movw	r20, r28
    1a70:	4f 5f       	subi	r20, 0xFF	; 255
    1a72:	5f 4f       	sbci	r21, 0xFF	; 255
    1a74:	0e 94 df 00 	call	0x1be	; 0x1be <CALLBACK_USB_GetDescriptor>
    1a78:	bc 01       	movw	r22, r24
    1a7a:	89 2b       	or	r24, r25
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <USB_Device_ProcessControlRequest+0x224>
    1a7e:	44 c0       	rjmp	.+136    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a80:	08 ee       	ldi	r16, 0xE8	; 232
    1a82:	10 e0       	ldi	r17, 0x00	; 0
    1a84:	f8 01       	movw	r30, r16
    1a86:	90 81       	ld	r25, Z
    1a88:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1a8a:	90 83       	st	Z, r25
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	25 dc       	rcall	.-1974   	; 0x12dc <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a92:	f8 01       	movw	r30, r16
    1a94:	80 81       	ld	r24, Z
    1a96:	8b 77       	andi	r24, 0x7B	; 123
    1a98:	80 83       	st	Z, r24
    1a9a:	36 c0       	rjmp	.+108    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1a9c:	90 38       	cpi	r25, 0x80	; 128
    1a9e:	a1 f5       	brne	.+104    	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1aa0:	e8 ee       	ldi	r30, 0xE8	; 232
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	87 7f       	andi	r24, 0xF7	; 247
    1aa8:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1aaa:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1aae:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1ab6:	80 83       	st	Z, r24
    1ab8:	4b dd       	rcall	.-1386   	; 0x1550 <Endpoint_ClearStatusStage>
    1aba:	26 c0       	rjmp	.+76     	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1abc:	91 11       	cpse	r25, r1
    1abe:	24 c0       	rjmp	.+72     	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1ac0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
    1ac4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <USB_ControlRequest+0x3>
    1ac8:	99 27       	eor	r25, r25
    1aca:	02 97       	sbiw	r24, 0x02	; 2
    1acc:	ec f4       	brge	.+58     	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ace:	e8 ee       	ldi	r30, 0xE8	; 232
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1ad6:	80 83       	st	Z, r24
    1ad8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
    1adc:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1ae0:	37 dd       	rcall	.-1426   	; 0x1550 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1ae2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_Device_ConfigurationNumber>
    1ae6:	88 23       	and	r24, r24
    1ae8:	21 f0       	breq	.+8      	; 0x1af2 <USB_Device_ProcessControlRequest+0x296>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1aea:	84 e0       	ldi	r24, 0x04	; 4
    1aec:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>
    1af0:	09 c0       	rjmp	.+18     	; 0x1b04 <USB_Device_ProcessControlRequest+0x2a8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1af2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1af6:	88 23       	and	r24, r24
    1af8:	14 f0       	brlt	.+4      	; 0x1afe <USB_Device_ProcessControlRequest+0x2a2>
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <USB_Device_ProcessControlRequest+0x2a4>
    1afe:	84 e0       	ldi	r24, 0x04	; 4
    1b00:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    1b04:	0e 94 8b 02 	call	0x516	; 0x516 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1b0c:	83 ff       	sbrs	r24, 3
    1b0e:	16 c0       	rjmp	.+44     	; 0x1b3c <USB_Device_ProcessControlRequest+0x2e0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b10:	e8 ee       	ldi	r30, 0xE8	; 232
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	87 7f       	andi	r24, 0xF7	; 247
    1b18:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b1a:	eb ee       	ldi	r30, 0xEB	; 235
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 62       	ori	r24, 0x20	; 32
    1b22:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1b24:	0b c0       	rjmp	.+22     	; 0x1b3c <USB_Device_ProcessControlRequest+0x2e0>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1b26:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
    1b2a:	91 30       	cpi	r25, 0x01	; 1
    1b2c:	69 f7       	brne	.-38     	; 0x1b08 <USB_Device_ProcessControlRequest+0x2ac>
    1b2e:	fd ce       	rjmp	.-518    	; 0x192a <USB_Device_ProcessControlRequest+0xce>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1b30:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USB_ControlRequest+0x2>
    1b34:	88 23       	and	r24, r24
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <USB_Device_ProcessControlRequest+0x2de>
    1b38:	ff ce       	rjmp	.-514    	; 0x1938 <USB_Device_ProcessControlRequest+0xdc>
    1b3a:	2a cf       	rjmp	.-428    	; 0x1990 <USB_Device_ProcessControlRequest+0x134>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1b3c:	aa 96       	adiw	r28, 0x2a	; 42
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	08 95       	ret

00001b52 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1b52:	08 95       	ret

00001b54 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1b54:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b56:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_DeviceState>
    1b5a:	88 23       	and	r24, r24
    1b5c:	99 f0       	breq	.+38     	; 0x1b84 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1b5e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1b62:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b64:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1b68:	98 2f       	mov	r25, r24
    1b6a:	91 70       	andi	r25, 0x01	; 1
    1b6c:	80 fd       	sbrc	r24, 0
    1b6e:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1b70:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b72:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1b7a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1b7c:	6f de       	rcall	.-802    	; 0x185c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b7e:	cf 70       	andi	r28, 0x0F	; 15
    1b80:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <__divmodhi4>:
    1b88:	97 fb       	bst	r25, 7
    1b8a:	07 2e       	mov	r0, r23
    1b8c:	16 f4       	brtc	.+4      	; 0x1b92 <__divmodhi4+0xa>
    1b8e:	00 94       	com	r0
    1b90:	06 d0       	rcall	.+12     	; 0x1b9e <__divmodhi4_neg1>
    1b92:	77 fd       	sbrc	r23, 7
    1b94:	08 d0       	rcall	.+16     	; 0x1ba6 <__divmodhi4_neg2>
    1b96:	0b d0       	rcall	.+22     	; 0x1bae <__udivmodhi4>
    1b98:	07 fc       	sbrc	r0, 7
    1b9a:	05 d0       	rcall	.+10     	; 0x1ba6 <__divmodhi4_neg2>
    1b9c:	3e f4       	brtc	.+14     	; 0x1bac <__divmodhi4_exit>

00001b9e <__divmodhi4_neg1>:
    1b9e:	90 95       	com	r25
    1ba0:	81 95       	neg	r24
    1ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba4:	08 95       	ret

00001ba6 <__divmodhi4_neg2>:
    1ba6:	70 95       	com	r23
    1ba8:	61 95       	neg	r22
    1baa:	7f 4f       	sbci	r23, 0xFF	; 255

00001bac <__divmodhi4_exit>:
    1bac:	08 95       	ret

00001bae <__udivmodhi4>:
    1bae:	aa 1b       	sub	r26, r26
    1bb0:	bb 1b       	sub	r27, r27
    1bb2:	51 e1       	ldi	r21, 0x11	; 17
    1bb4:	07 c0       	rjmp	.+14     	; 0x1bc4 <__udivmodhi4_ep>

00001bb6 <__udivmodhi4_loop>:
    1bb6:	aa 1f       	adc	r26, r26
    1bb8:	bb 1f       	adc	r27, r27
    1bba:	a6 17       	cp	r26, r22
    1bbc:	b7 07       	cpc	r27, r23
    1bbe:	10 f0       	brcs	.+4      	; 0x1bc4 <__udivmodhi4_ep>
    1bc0:	a6 1b       	sub	r26, r22
    1bc2:	b7 0b       	sbc	r27, r23

00001bc4 <__udivmodhi4_ep>:
    1bc4:	88 1f       	adc	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	5a 95       	dec	r21
    1bca:	a9 f7       	brne	.-22     	; 0x1bb6 <__udivmodhi4_loop>
    1bcc:	80 95       	com	r24
    1bce:	90 95       	com	r25
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	08 95       	ret

00001bd6 <memcmp>:
    1bd6:	fb 01       	movw	r30, r22
    1bd8:	dc 01       	movw	r26, r24
    1bda:	04 c0       	rjmp	.+8      	; 0x1be4 <memcmp+0xe>
    1bdc:	8d 91       	ld	r24, X+
    1bde:	01 90       	ld	r0, Z+
    1be0:	80 19       	sub	r24, r0
    1be2:	21 f4       	brne	.+8      	; 0x1bec <memcmp+0x16>
    1be4:	41 50       	subi	r20, 0x01	; 1
    1be6:	50 40       	sbci	r21, 0x00	; 0
    1be8:	c8 f7       	brcc	.-14     	; 0x1bdc <memcmp+0x6>
    1bea:	88 1b       	sub	r24, r24
    1bec:	99 0b       	sbc	r25, r25
    1bee:	08 95       	ret

00001bf0 <memcpy>:
    1bf0:	fb 01       	movw	r30, r22
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <memcpy+0xa>
    1bf6:	01 90       	ld	r0, Z+
    1bf8:	0d 92       	st	X+, r0
    1bfa:	41 50       	subi	r20, 0x01	; 1
    1bfc:	50 40       	sbci	r21, 0x00	; 0
    1bfe:	d8 f7       	brcc	.-10     	; 0x1bf6 <memcpy+0x6>
    1c00:	08 95       	ret

00001c02 <memset>:
    1c02:	dc 01       	movw	r26, r24
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <memset+0x6>
    1c06:	6d 93       	st	X+, r22
    1c08:	41 50       	subi	r20, 0x01	; 1
    1c0a:	50 40       	sbci	r21, 0x00	; 0
    1c0c:	e0 f7       	brcc	.-8      	; 0x1c06 <memset+0x4>
    1c0e:	08 95       	ret

00001c10 <_exit>:
    1c10:	f8 94       	cli

00001c12 <__stop_program>:
    1c12:	ff cf       	rjmp	.-2      	; 0x1c12 <__stop_program>
